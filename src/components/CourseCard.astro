---
interface Props {
  course: {
    id: string;
    title: string;
    description: string;
    level: string;
    status: string;
    topic_count?: number;
    icon?: string;
  };
  levelColor: string;
}

const { course, levelColor } = Astro.props;

// Get the appropriate button text and style based on status
const buttonConfig = course.status === 'available' 
  ? { text: 'Start Learning', style: 'bg-blue-600 hover:bg-blue-700 text-white' }
  : { text: 'Coming Soon', style: 'bg-gray-200 text-gray-500 cursor-not-allowed' };
---

<div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm hover:shadow-md transition-all duration-200 p-6">
  <div class="flex justify-between items-start mb-4">
    <div class="text-4xl">
      {course.icon || 'ðŸ“š'}
    </div>
    <span class={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${levelColor}`}>
      {course.level}
    </span>
  </div>

  <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">
    {course.title}
  </h3>

  <p class="text-gray-600 dark:text-gray-300 text-sm mb-4 line-clamp-2">
    {course.description}
  </p>

  <div class="flex items-center justify-between mt-auto">
    <span class="text-sm text-gray-500 dark:text-gray-400">
      {course.topic_count || 0} Topics
    </span>
    <button 
      class={`px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 ${buttonConfig.style}`}
      disabled={course.status !== 'available'}
    >
      {buttonConfig.text}
    </button>
  </div>
</div>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
