---
interface Props {
  selectedLevel: string;
  selectedStatus: string;
  searchQuery: string;
}

const { selectedLevel = '', selectedStatus = '', searchQuery = '' } = Astro.props;
---

<div class="space-y-6">
  <!-- Search -->
  <div>
    <label for="search" class="block text-sm font-medium text-gray-700 dark:text-gray-200">
      Search Courses
    </label>
    <div class="mt-1">
      <input
        type="search"
        name="search"
        id="search"
        value={searchQuery}
        class="block w-full rounded-md border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
        placeholder="Search courses..."
      />
    </div>
  </div>

  <!-- Level Filter -->
  <div>
    <h3 class="text-sm font-medium text-gray-700 dark:text-gray-200">Level</h3>
    <div class="mt-2 space-y-2">
      <div class="flex items-center">
        <input
          type="radio"
          id="level-all"
          name="level"
          value=""
          checked={!selectedLevel}
          class="h-4 w-4 border-gray-300 dark:border-gray-700 text-indigo-600 focus:ring-indigo-500"
        />
        <label for="level-all" class="ml-3 text-sm text-gray-600 dark:text-gray-300">
          All Levels
        </label>
      </div>
      <div class="flex items-center">
        <input
          type="radio"
          id="level-beginner"
          name="level"
          value="beginner"
          checked={selectedLevel && selectedLevel.toLowerCase() === 'beginner'}
          class="h-4 w-4 border-gray-300 dark:border-gray-700 text-indigo-600 focus:ring-indigo-500"
        />
        <label for="level-beginner" class="ml-3 text-sm text-gray-600 dark:text-gray-300">
          Beginner
        </label>
      </div>
      <div class="flex items-center">
        <input
          type="radio"
          id="level-intermediate"
          name="level"
          value="intermediate"
          checked={selectedLevel && selectedLevel.toLowerCase() === 'intermediate'}
          class="h-4 w-4 border-gray-300 dark:border-gray-700 text-indigo-600 focus:ring-indigo-500"
        />
        <label for="level-intermediate" class="ml-3 text-sm text-gray-600 dark:text-gray-300">
          Intermediate
        </label>
      </div>
      <div class="flex items-center">
        <input
          type="radio"
          id="level-advanced"
          name="level"
          value="advanced"
          checked={selectedLevel && selectedLevel.toLowerCase() === 'advanced'}
          class="h-4 w-4 border-gray-300 dark:border-gray-700 text-indigo-600 focus:ring-indigo-500"
        />
        <label for="level-advanced" class="ml-3 text-sm text-gray-600 dark:text-gray-300">
          Advanced
        </label>
      </div>
    </div>
  </div>

  <!-- Status Filter -->
  <div>
    <h3 class="text-sm font-medium text-gray-700 dark:text-gray-200">Status</h3>
    <div class="mt-2 space-y-2">
      <div class="flex items-center">
        <input
          type="radio"
          id="status-all"
          name="status"
          value=""
          checked={!selectedStatus}
          class="h-4 w-4 border-gray-300 dark:border-gray-700 text-indigo-600 focus:ring-indigo-500"
        />
        <label for="status-all" class="ml-3 text-sm text-gray-600 dark:text-gray-300">
          All Status
        </label>
      </div>
      <div class="flex items-center">
        <input
          type="radio"
          id="status-available"
          name="status"
          value="available"
          checked={selectedStatus === 'available'}
          class="h-4 w-4 border-gray-300 dark:border-gray-700 text-indigo-600 focus:ring-indigo-500"
        />
        <label for="status-available" class="ml-3 text-sm text-gray-600 dark:text-gray-300">
          Available
        </label>
      </div>
      <div class="flex items-center">
        <input
          type="radio"
          id="status-coming-soon"
          name="status"
          value="coming-soon"
          checked={selectedStatus === 'coming-soon'}
          class="h-4 w-4 border-gray-300 dark:border-gray-700 text-indigo-600 focus:ring-indigo-500"
        />
        <label for="status-coming-soon" class="ml-3 text-sm text-gray-600 dark:text-gray-300">
          Coming Soon
        </label>
      </div>
    </div>
  </div>

  <!-- Clear Filters Button -->
  <div class="pt-2">
    <button
      type="button"
      id="clear-filters"
      class="w-full rounded-md border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-200 shadow-sm hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
    >
      Clear Filters
    </button>
  </div>
</div>

<script>
  let debounceTimeout: number;

  function updateURL(params: URLSearchParams) {
    const newURL = `${window.location.pathname}?${params.toString()}`;
    window.history.pushState({ path: newURL }, '', newURL);
    window.dispatchEvent(new Event('popstate')); // Trigger a URL change event
  }

  function debounce(func: Function, wait: number) {
    return (...args: any[]) => {
      clearTimeout(debounceTimeout);
      debounceTimeout = setTimeout(() => func.apply(null, args), wait);
    };
  }

  function handleFilterChange() {
    const currentParams = new URLSearchParams(window.location.search);
    const searchInput = document.getElementById('search') as HTMLInputElement;
    const selectedLevel = document.querySelector('input[name="level"]:checked') as HTMLInputElement;
    const selectedStatus = document.querySelector('input[name="status"]:checked') as HTMLInputElement;

    // Update search parameter
    if (searchInput?.value) {
      currentParams.set('search', searchInput.value);
    } else {
      currentParams.delete('search');
    }

    // Update level parameter
    if (selectedLevel?.value) {
      currentParams.set('level', selectedLevel.value);
    } else {
      currentParams.delete('level');
    }

    // Update status parameter
    if (selectedStatus?.value) {
      currentParams.set('status', selectedStatus.value);
    } else {
      currentParams.delete('status');
    }

    updateURL(currentParams);
  }

  // Initialize event listeners
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search') as HTMLInputElement;
    const levelInputs = document.querySelectorAll('input[name="level"]');
    const statusInputs = document.querySelectorAll('input[name="status"]');
    const clearFiltersBtn = document.getElementById('clear-filters');

    // Add debounced search handler
    searchInput?.addEventListener('input', debounce(() => handleFilterChange(), 300));

    // Add filter change handlers
    levelInputs?.forEach(input => {
      input.addEventListener('change', handleFilterChange);
    });

    statusInputs?.forEach(input => {
      input.addEventListener('change', handleFilterChange);
    });

    // Add clear filters handler
    clearFiltersBtn?.addEventListener('click', () => {
      const currentParams = new URLSearchParams(window.location.search);
      
      // Reset all inputs
      if (searchInput) searchInput.value = '';
      document.getElementById('level-all')?.click();
      document.getElementById('status-all')?.click();

      // Clear all parameters
      currentParams.delete('search');
      currentParams.delete('level');
      currentParams.delete('status');

      updateURL(currentParams);
    });

    // Handle browser back/forward
    window.addEventListener('popstate', () => {
      const params = new URLSearchParams(window.location.search);
      
      // Update search input
      if (searchInput) {
        searchInput.value = params.get('search') || '';
      }

      // Update level radio
      const level = params.get('level');
      const levelInput = level 
        ? document.getElementById(`level-${level && level.toLowerCase()}`) as HTMLInputElement
        : document.getElementById('level-all') as HTMLInputElement;
      if (levelInput) levelInput.checked = true;

      // Update status radio
      const status = params.get('status');
      const statusInput = status
        ? document.getElementById(`status-${status && status.toLowerCase()}`) as HTMLInputElement
        : document.getElementById('status-all') as HTMLInputElement;
      if (statusInput) statusInput.checked = true;
    });
  });
</script>
