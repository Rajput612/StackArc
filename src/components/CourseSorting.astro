---
interface Props {
  currentSort?: string;
}

const { currentSort = 'newest' } = Astro.props;

const sortOptions = [
  { value: '', label: 'Default Sorting' },
  { value: 'title', label: 'Title (A-Z)' },
  { value: '-title', label: 'Title (Z-A)' },
  { value: 'level', label: 'Level (Ascending)' },
  { value: '-level', label: 'Level (Descending)' },
  { value: 'created_at', label: 'Newest First' },
  { value: '-created_at', label: 'Oldest First' }
];
---

<div>
  <label 
    for="course-sorting" 
    class="block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1"
  >
    Sort Courses
  </label>
  <select 
    id="course-sorting" 
    name="ordering"
    class="block w-full rounded-md border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
  >
    {sortOptions.map((option) => (
      <option value={option.value} selected={currentSort === option.value}>
        {option.label}
      </option>
    ))}
  </select>
</div>

<script>
  function updateSorting() {
    const sortSelect = document.getElementById('course-sorting') as HTMLSelectElement;
    const selectedSort = sortSelect.value;

    // Dispatch custom event with sort parameter
    window.dispatchEvent(new CustomEvent('course-sort-change', {
      detail: { sort: selectedSort }
    }));
  }

  // Initialize event listener
  document.addEventListener('DOMContentLoaded', () => {
    const sortSelect = document.getElementById('course-sorting') as HTMLSelectElement;
    sortSelect.addEventListener('change', updateSorting);

    // Set initial sorting from URL if exists
    const urlParams = new URLSearchParams(window.location.search);
    const orderingParam = urlParams.get('ordering');
    if (orderingParam) {
      sortSelect.value = orderingParam;
    }
  });
</script>
