---
import MainLayout from '../layouts/MainLayout.astro';
import CourseCard from '../components/CourseCard';

// Initial server-side fetch
const API_URL = import.meta.env.PUBLIC_API_URL || 'http://127.0.0.1:8000';
const response = await fetch(`${API_URL}/api/courses/`);
const initialData = await response.json();
const initialCourses = Array.isArray(initialData) ? initialData : initialData.results || [];

// Group initial courses by level
const coursesByLevel = initialCourses.reduce((acc, course) => {
  if (course.status === 'available') {
    const level = course.level || 'Other';
    acc[level] = acc[level] || [];
    acc[level].push(course);
  }
  return acc;
}, {});

// Sort levels: Beginner, Intermediate, Advanced, Other
const levelOrder = ['Beginner', 'Intermediate', 'Advanced', 'Other'];
const sortedLevels = Object.keys(coursesByLevel).sort(
  (a, b) => levelOrder.indexOf(a) - levelOrder.indexOf(b)
);

// Upcoming courses
const upcomingCourses = initialCourses.filter(course => course.status === 'coming-soon');

// Helper to get level color
function getLevelColor(level) {
  const colors = {
    'Beginner': 'bg-green-100 text-green-800 ring-green-600/20 dark:bg-green-900/30 dark:text-green-400',
    'Intermediate': 'bg-blue-100 text-blue-800 ring-blue-600/20 dark:bg-blue-900/30 dark:text-blue-400',
    'Advanced': 'bg-purple-100 text-purple-800 ring-purple-600/20 dark:bg-purple-900/30 dark:text-purple-400'
  };
  return colors[level] || 'bg-gray-100 text-gray-800 ring-gray-600/20 dark:bg-gray-900/30 dark:text-gray-400';
}
---

<MainLayout title="Courses - StackArc">
  <div class="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 py-12 transition-colors duration-200">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h1 class="text-4xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-indigo-600 dark:from-blue-400 dark:to-indigo-400 mb-4">
          Available Courses
        </h1>
        <p class="text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">
          Choose from our carefully curated selection of programming courses
        </p>
      </div>

      <div class="mb-8 flex flex-col sm:flex-row justify-center space-y-4 sm:space-y-0 sm:space-x-4">
        <input
          type="text"
          id="searchInput"
          placeholder="Search by title"
          class="w-full sm:w-auto border border-gray-300 dark:border-gray-600 rounded-lg px-4 py-2 
                 bg-white dark:bg-gray-800 text-gray-900 dark:text-white
                 placeholder-gray-500 dark:placeholder-gray-400
                 focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent
                 transition-all duration-200 outline-none"
        />
        <select
          id="levelSelect"
          class="w-full sm:w-auto border border-gray-300 dark:border-gray-600 rounded-lg px-4 py-2
                 bg-white dark:bg-gray-800 text-gray-900 dark:text-white
                 focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent
                 transition-all duration-200 outline-none"
        >
          <option value="">All Levels</option>
          <option value="Beginner">Beginner</option>
          <option value="Intermediate">Intermediate</option>
          <option value="Advanced">Advanced</option>
        </select>
        <select
          id="statusSelect"
          class="w-full sm:w-auto border border-gray-300 dark:border-gray-600 rounded-lg px-4 py-2
                 bg-white dark:bg-gray-800 text-gray-900 dark:text-white
                 focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent
                 transition-all duration-200 outline-none"
        >
          <option value="">All Statuses</option>
          <option value="available">Available</option>
          <option value="coming-soon">Coming Soon</option>
        </select>
        <button
          id="searchButton"
          class="w-full sm:w-auto bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 
                 text-white font-medium rounded-lg px-6 py-2
                 transform hover:scale-105 active:scale-95
                 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800
                 transition-all duration-200"
        >
          Search
        </button>
      </div>

      <div id="errorContainer" 
           class="hidden bg-red-100 dark:bg-red-900/50 border border-red-400 dark:border-red-500 
                  text-red-700 dark:text-red-400 px-4 py-3 rounded-lg relative mb-6 transition-all duration-200" 
           role="alert">
        <span class="block sm:inline"></span>
      </div>

      <div id="courseContainer" class="transition-all duration-200">
        {sortedLevels.map(level => (
          <div class="mb-16">
            <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-8 transition-colors duration-200">
              {level} Courses
            </h2>
            <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
              {coursesByLevel[level].map(course => (
                <CourseCard course={course} levelColor={getLevelColor(course.level)} />
              ))}
            </div>
          </div>
        ))}

        {upcomingCourses.length > 0 && (
          <div class="mb-16">
            <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-8 transition-colors duration-200">
              Coming Soon
            </h2>
            <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
              {upcomingCourses.map(course => (
                <CourseCard course={course} levelColor={getLevelColor(course.level)} />
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  </div>
</MainLayout>

<script>
  let debounceTimeout;
  const API_URL = import.meta.env.PUBLIC_API_URL || 'http://127.0.0.1:8000';

  // DOM Elements
  const searchInput = document.getElementById('searchInput');
  const levelSelect = document.getElementById('levelSelect');
  const statusSelect = document.getElementById('statusSelect');
  const searchButton = document.getElementById('searchButton');
  const errorContainer = document.getElementById('errorContainer');
  const courseContainer = document.getElementById('courseContainer');

  // Helper function to show error
  function showError(message) {
    errorContainer.querySelector('span').textContent = message;
    errorContainer.classList.remove('hidden');
  }

  // Helper function to hide error
  function hideError() {
    errorContainer.classList.add('hidden');
  }

  // Helper function to get level color
  function getLevelColor(level) {
    const colors = {
      'Beginner': 'bg-green-100 text-green-800 ring-green-600/20 dark:bg-green-900/30 dark:text-green-400',
      'Intermediate': 'bg-blue-100 text-blue-800 ring-blue-600/20 dark:bg-blue-900/30 dark:text-blue-400',
      'Advanced': 'bg-purple-100 text-purple-800 ring-purple-600/20 dark:bg-purple-900/30 dark:text-purple-400'
    };
    return colors[level] || 'bg-gray-100 text-gray-800 ring-gray-600/20 dark:bg-gray-900/30 dark:text-gray-400';
  }

  // Helper function to create course card HTML
  function createCourseCardHTML(course) {
    const levelColor = getLevelColor(course.level);
    return `
      <div class="group bg-white dark:bg-gray-800 rounded-lg shadow-md dark:shadow-gray-900/30 
                  overflow-hidden hover:shadow-lg dark:hover:shadow-gray-900/50 
                  transform hover:scale-102 active:scale-98
                  transition-all duration-200 ease-in-out">
        <div class="p-6">
          <div class="flex items-center justify-between mb-4">
            <span class="text-4xl group-hover:scale-110 transition-transform duration-200">${course.icon || 'ðŸ“š'}</span>
            <span class="inline-flex items-center rounded-md px-2.5 py-1 text-sm font-medium ${levelColor} 
                       ring-1 ring-inset transition-colors duration-200">
              ${course.level || 'Beginner'}
            </span>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2 
                     group-hover:text-blue-600 dark:group-hover:text-blue-400 
                     transition-colors duration-200">
            ${course.title}
          </h3>
          <p class="text-gray-600 dark:text-gray-300 line-clamp-2 mb-4 transition-colors duration-200">
            ${course.description}
          </p>
          <div class="flex items-center justify-between">
            <span class="text-sm text-gray-500 dark:text-gray-400 transition-colors duration-200">
              ${course.topic_count} Topics
            </span>
            ${course.status === 'available' 
              ? '<span class="text-green-600 dark:text-green-400 font-medium transition-colors duration-200">Available</span>'
              : '<span class="text-yellow-600 dark:text-yellow-400 font-medium transition-colors duration-200">Coming Soon</span>'
            }
          </div>
        </div>
      </div>
    `;
  }

  // Helper function to update courses display
  function updateCoursesDisplay(courses) {
    // Group courses by level
    const coursesByLevel = courses.reduce((acc, course) => {
      if (course.status === 'available') {
        const level = course.level || 'Other';
        acc[level] = acc[level] || [];
        acc[level].push(course);
      }
      return acc;
    }, {});

    // Sort levels
    const levelOrder = ['Beginner', 'Intermediate', 'Advanced', 'Other'];
    const sortedLevels = Object.keys(coursesByLevel).sort(
      (a, b) => levelOrder.indexOf(a) - levelOrder.indexOf(b)
    );

    // Get upcoming courses
    const upcomingCourses = courses.filter(course => course.status === 'coming-soon');

    // Build HTML
    let html = '';

    // Add available courses by level
    sortedLevels.forEach(level => {
      if (coursesByLevel[level] && coursesByLevel[level].length > 0) {
        html += `
          <div class="mb-16">
            <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-8 transition-colors duration-200">
              ${level} Courses
            </h2>
            <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
              ${coursesByLevel[level].map(course => createCourseCardHTML(course)).join('')}
            </div>
          </div>
        `;
      }
    });

    // Add upcoming courses
    if (upcomingCourses.length > 0) {
      html += `
        <div class="mb-16">
          <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-8 transition-colors duration-200">
            Coming Soon
          </h2>
          <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
            ${upcomingCourses.map(course => createCourseCardHTML(course)).join('')}
          </div>
        </div>
      `;
    }

    // Update the container
    courseContainer.innerHTML = html || '<p class="text-center text-gray-500 dark:text-gray-400">No courses found</p>';
  }

  // Fetch courses function
  async function fetchCourses() {
    const searchTerm = searchInput.value;
    const selectedLevel = levelSelect.value;
    const selectedStatus = statusSelect.value;

    try {
      console.log('Fetching courses with:', { searchTerm, selectedLevel, selectedStatus });
      
      const response = await fetch(
        `${API_URL}/api/courses/?search=${encodeURIComponent(searchTerm)}&level=${encodeURIComponent(selectedLevel)}&status=${encodeURIComponent(selectedStatus)}`
      );

      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }

      const data = await response.json();
      const courses = Array.isArray(data) ? data : data.results || [];
      
      console.log('Courses fetched:', courses);
      hideError();
      updateCoursesDisplay(courses);
    } catch (error) {
      console.error('Error fetching courses:', error);
      showError('Failed to load courses. Please try again later.');
    }
  }

  // Debounce function
  function debounce(func, wait) {
    return (...args) => {
      clearTimeout(debounceTimeout);
      debounceTimeout = setTimeout(() => func.apply(this, args), wait);
    };
  }

  // Add event listeners
  searchInput.addEventListener('input', debounce(fetchCourses, 500));
  levelSelect.addEventListener('change', fetchCourses);
  statusSelect.addEventListener('change', fetchCourses);
  searchButton.addEventListener('click', fetchCourses);

  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Search functionality initialized');
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Add smooth transition for theme changes */
  :root {
    --transition-duration: 200ms;
  }

  * {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: var(--transition-duration);
  }
</style>
