---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
import CourseSidebarFilter from '../components/CourseSidebarFilter.astro';
import CourseSorting from '../components/CourseSorting.astro';

// Fetch courses server-side
const PUBLIC_API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:8000';

// Get search params for initial filtering
const fetchCourses = async (searchParams = new URLSearchParams()) => {
  try {
    // Construct API URL with filters
    const apiUrl = new URL(`${PUBLIC_API_URL}/api/courses/`);
    
    // Add search parameters
    const params = new URLSearchParams();
    
    // Search query
    const search = searchParams.get('search') || '';
    if (search) params.append('search', search);
    
    // Level filter
    const level = searchParams.get('level') || '';
    if (level) params.append('level', level);
    
    // Status filter
    const status = searchParams.get('status') || '';
    if (status) params.append('status', status);
    
    // Sorting
    const sort = searchParams.get('sort') || 'newest';
    const sortMap = {
      'newest': '-created_at',
      'oldest': 'created_at',
      'name': 'title',
      'name-desc': '-title',
      'level': 'level',
      'level-desc': '-level'
    };
    params.append('ordering', sortMap[sort] || sort);

    // Fetch courses
    const response = await fetch(`${apiUrl}?${params.toString()}`);
    
    if (!response.ok) {
      throw new Error('Failed to fetch courses');
    }
    
    return await response.json();
  } catch (error) {
    console.error('Error fetching courses:', error);
    return [];
  }
};

// Server-side initial fetch
const initialCourses = await fetchCourses();
---

<Layout title="Courses">
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <Navbar />
    
    <div class="pt-16">
      <header class="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
        <div class="container mx-auto px-4 py-4">
          <div class="flex flex-col sm:flex-row justify-between items-center gap-4">
            <h1 class="text-2xl font-bold text-gray-900 dark:text-white">
              All Courses
            </h1>
            <div class="w-full sm:w-auto">
              <CourseSorting client:load />
            </div>
          </div>
        </div>
      </header>

      <div class="container mx-auto px-4 py-8">
        <div class="lg:grid lg:grid-cols-12 lg:gap-8">
          <aside class="lg:col-span-3">
            <div class="sticky top-24 bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6">
              <CourseSidebarFilter client:load />
            </div>
          </aside>

          <main class="mt-6 lg:mt-0 lg:col-span-9">
            <div 
              id="courses-container" 
              class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
            >
              {initialCourses.map(course => (
                <div class="course-card w-full bg-white rounded-lg shadow-md overflow-hidden transition-all duration-300 hover:shadow-xl group relative flex flex-col">
                  <div class="relative p-4 pb-0 flex items-center">
                    <span class="text-3xl mr-4">
                      {course.icon}
                    </span>
                    <h3 class="text-lg font-semibold text-gray-900 flex-grow">
                      {course.title}
                    </h3>
                    
                    <div class="absolute top-0 right-0">
                      <span class={`px-2 py-1 text-xs font-medium rounded-full ${
                        course.status === 'coming-soon' 
                          ? 'bg-yellow-100 text-yellow-800' 
                          : 'bg-green-100 text-green-800'
                      }`}>
                        {course.status === 'coming-soon' ? 'Coming Soon' : 'Available'}
                      </span>
                    </div>
                  </div>
                  
                  <div class="p-4 flex flex-col flex-grow">
                    <p class="text-sm text-gray-600 mb-4 flex-grow line-clamp-3">
                      {course.description}
                    </p>
                    
                    <div class="flex justify-between items-center">
                      <div class="text-sm text-gray-500">
                        {course.total_topics} Topics
                      </div>
                      
                      <a 
                        href={`/courses/${course.id}`}
                        class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition-colors w-32 text-center"
                      >
                        Start Learning
                      </a>
                    </div>
                  </div>
                  
                  <div class="absolute bottom-0 left-0 right-0 h-1 bg-gray-200 hidden group-hover:block">
                    <div 
                      class="h-full bg-blue-500" 
                      style={`width: ${Math.random() * 100}%`}
                    ></div>
                  </div>
                </div>
              ))}
            </div>
          </main>
        </div>
      </div>
    </div>
  </div>

  <script>
    const PUBLIC_API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:8000';

    // Function to fetch and render courses
    const fetchAndRenderCourses = async () => {
      const coursesContainer = document.getElementById('courses-container');
      if (!coursesContainer) return;

      try {
        // Get current URL search params
        const searchParams = new URLSearchParams(window.location.search);
        
        // Construct API URL with filters
        const apiUrl = new URL(`${PUBLIC_API_URL}/api/courses/`);
        const params = new URLSearchParams();
        
        // Search query
        const search = searchParams.get('search') || '';
        if (search) params.append('search', search);
        
        // Level filter
        const level = searchParams.get('level') || '';
        if (level) params.append('level', level);
        
        // Status filter
        const status = searchParams.get('status') || '';
        if (status) params.append('status', status);
        
        // Sorting
        const sort = searchParams.get('sort') || 'newest';
        const sortMap = {
          'newest': '-created_at',
          'oldest': 'created_at',
          'name': 'title',
          'name-desc': '-title',
          'level': 'level',
          'level-desc': '-level'
        };
        params.append('ordering', sortMap[sort] || sort);

        // Fetch courses
        const response = await fetch(`${apiUrl}?${params.toString()}`);
        
        if (!response.ok) {
          throw new Error('Failed to fetch courses');
        }
        
        const courses = await response.json();
        
        // Render courses
        coursesContainer.innerHTML = courses.map(course => `
          <div class="course-card w-full bg-white rounded-lg shadow-md overflow-hidden transition-all duration-300 hover:shadow-xl group relative flex flex-col">
            <div class="relative p-4 pb-0 flex items-center">
              <span class="text-3xl mr-4">
                ${course.icon}
              </span>
              <h3 class="text-lg font-semibold text-gray-900 flex-grow">
                ${course.title}
              </h3>
              
              <div class="absolute top-0 right-0">
                <span class="px-2 py-1 text-xs font-medium rounded-full ${
                  course.status === 'coming-soon' 
                    ? 'bg-yellow-100 text-yellow-800' 
                    : 'bg-green-100 text-green-800'
                }">
                  ${course.status === 'coming-soon' ? 'Coming Soon' : 'Available'}
                </span>
              </div>
            </div>
            
            <div class="p-4 flex flex-col flex-grow">
              <p class="text-sm text-gray-600 mb-4 flex-grow line-clamp-3">
                ${course.description}
              </p>
              
              <div class="flex justify-between items-center">
                <div class="text-sm text-gray-500">
                  ${course.total_topics} Topics
                </div>
                
                <a 
                  href="/courses/${course.id}"
                  class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition-colors w-32 text-center"
                >
                  Start Learning
                </a>
              </div>
            </div>
            
            <div class="absolute bottom-0 left-0 right-0 h-1 bg-gray-200 hidden group-hover:block">
              <div 
                class="h-full bg-blue-500" 
                style="width: ${Math.random() * 100}%"
              ></div>
            </div>
          </div>
        `).join('');
      } catch (error) {
        console.error('Error fetching courses:', error);
        coursesContainer.innerHTML = `
          <div class="col-span-full text-center py-12">
            <p class="text-red-600">Failed to load courses. Please try again later.</p>
          </div>
        `;
      }
    };

    // Event listeners for dynamic filtering
    window.addEventListener('popstate', fetchAndRenderCourses);
    
    // Custom event for filter changes
    document.addEventListener('course-filter-change', fetchAndRenderCourses);
  </script>
</Layout>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
