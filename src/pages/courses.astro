---
import MainLayout from '../layouts/MainLayout.astro';

// Actual course data based on learning path
const courses = [
  {
    id: 1,
    title: 'Python Fundamentals',
    description: 'Master Python basics including syntax, data types, control structures, and functions',
    level: 'Beginner',
    duration: '4 weeks',
    enrolled: 1234,
    rating: 4.8,
    icon: 'üêç',
    image: '/images/python-basics.jpg',
    status: 'Available',
    progress: 0,
    tags: ['Python', 'Programming', 'Basics']
  },
  {
    id: 2,
    title: 'Git & Version Control',
    description: 'Learn Git fundamentals, branching, merging, and collaboration workflows',
    level: 'Beginner',
    duration: '2 weeks',
    enrolled: 956,
    rating: 4.7,
    icon: 'üîÑ',
    image: '/images/git-basics.jpg',
    status: 'Available',
    progress: 0,
    tags: ['Git', 'Version Control', 'Collaboration']
  },
  {
    id: 3,
    title: 'Object-Oriented Programming in Python',
    description: 'Deep dive into OOP concepts, classes, inheritance, and polymorphism',
    level: 'Intermediate',
    duration: '6 weeks',
    enrolled: 823,
    rating: 4.9,
    icon: 'üéØ',
    image: '/images/python-oop.jpg',
    status: 'Available',
    progress: 0,
    tags: ['Python', 'OOP', 'Advanced']
  },
  {
    id: 4,
    title: 'Data Structures & Algorithms',
    description: 'Master essential data structures and algorithms using Python',
    level: 'Advanced',
    duration: '8 weeks',
    enrolled: 645,
    rating: 4.8,
    icon: 'üìö',
    image: '/images/dsa.jpg',
    status: 'Coming Soon',
    progress: 0,
    tags: ['DSA', 'Python', 'Advanced']
  },
  {
    id: 5,
    title: 'Web Development with Python',
    description: 'Build web applications using Python frameworks like Flask and Django',
    level: 'Intermediate',
    duration: '10 weeks',
    enrolled: 0,
    rating: 0,
    icon: 'üöÄ',
    image: '/images/web-dev.jpg',
    status: 'Coming Soon',
    progress: 0,
    tags: ['Python', 'Web Development', 'Flask', 'Django']
  },
  {
    id: 6,
    title: 'Python for Data Science',
    description: 'Learn data analysis, visualization, and machine learning with Python',
    level: 'Advanced',
    duration: '12 weeks',
    enrolled: 0,
    rating: 0,
    icon: 'üìä',
    image: '/images/data-science.jpg',
    status: 'Coming Soon',
    progress: 0,
    tags: ['Python', 'Data Science', 'ML']
  }
];

const itemsPerPage = 8;
---

<MainLayout title="Courses - StackArc">
  <div class="pt-20 pb-16 min-h-screen bg-gray-50 dark:bg-gray-900">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Header -->
      <div class="text-center mb-12">
        <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">
          Python Courses
        </h1>
        <p class="text-xl text-gray-600 dark:text-gray-400">
          From basics to advanced Python programming
        </p>
      </div>

      <!-- Search and Filters -->
      <div class="mb-8 grid grid-cols-1 md:grid-cols-4 gap-4">
        <!-- Search -->
        <div class="md:col-span-2">
          <div class="relative">
            <input
              type="text"
              id="search"
              class="w-full px-4 py-2 pl-10 pr-4 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400 focus:border-transparent dark:bg-gray-700 dark:text-white"
              placeholder="Search courses..."
            />
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
          </div>
        </div>

        <!-- Filters -->
        <div>
          <select
            id="level-filter"
            class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400 focus:border-transparent dark:bg-gray-700 dark:text-white"
          >
            <option value="">All Levels</option>
            <option value="beginner">Beginner</option>
            <option value="intermediate">Intermediate</option>
            <option value="advanced">Advanced</option>
          </select>
        </div>

        <div>
          <select
            id="sort-filter"
            class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400 focus:border-transparent dark:bg-gray-700 dark:text-white"
          >
            <option value="popular">Most Popular</option>
            <option value="newest">Newest</option>
            <option value="rating">Highest Rated</option>
          </select>
        </div>
      </div>

      <!-- Available Courses -->
      <section class="mb-12">
        <h2 class="text-2xl font-bold mb-6 text-gray-900 dark:text-white">Available Courses</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {courses.filter(course => course.status === 'Available').map(course => (
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden border border-gray-100 dark:border-gray-700 hover:shadow-xl transition-all duration-300">
              <div class="p-6">
                <div class="flex items-center mb-4">
                  <span class="text-4xl mr-3 filter drop-shadow-sm" role="img" aria-label={course.title}>
                    {course.icon}
                  </span>
                  <div>
                    <h3 class="text-xl font-bold text-gray-900 dark:text-white">
                      {course.title}
                    </h3>
                    <p class="text-sm text-gray-500 dark:text-gray-400">
                      {course.duration} ‚Ä¢ {course.level}
                    </p>
                  </div>
                </div>
                <p class="text-sm text-gray-600 dark:text-gray-400 mb-4 line-clamp-2">
                  {course.description}
                </p>
                <div class="space-y-4">
                  <div class="flex items-center justify-between text-sm">
                    <div class="flex items-center">
                      <svg class="h-5 w-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                      </svg>
                      <span class="ml-1 text-gray-600 dark:text-gray-400">{course.rating}</span>
                    </div>
                    <span class="text-gray-500 dark:text-gray-400">{course.enrolled.toLocaleString()} enrolled</span>
                  </div>
                  <button
                    class="w-full py-2.5 px-4 bg-gradient-to-r from-indigo-600 to-indigo-700 hover:from-indigo-700 hover:to-indigo-800 text-white text-sm font-semibold rounded-lg shadow-md hover:shadow-lg transform transition-all duration-200 hover:-translate-y-0.5"
                    data-course-id={course.id}
                  >
                    Enroll Now
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </section>

      <!-- Upcoming Courses -->
      <section>
        <h2 class="text-2xl font-bold mb-6 text-gray-900 dark:text-white">Upcoming Courses</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {courses.filter(course => course.status === 'Coming Soon').map(course => (
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden border border-gray-100 dark:border-gray-700 hover:shadow-xl transition-all duration-300">
              <div class="p-6">
                <div class="flex items-center mb-4">
                  <span class="text-4xl mr-3 filter drop-shadow-sm" role="img" aria-label={course.title}>
                    {course.icon}
                  </span>
                  <div>
                    <h3 class="text-xl font-bold text-gray-900 dark:text-white">
                      {course.title}
                    </h3>
                    <p class="text-sm text-gray-500 dark:text-gray-400">
                      {course.duration} ‚Ä¢ {course.level}
                    </p>
                  </div>
                </div>
                <p class="text-sm text-gray-600 dark:text-gray-400 mb-4 line-clamp-2">
                  {course.description}
                </p>
                <div class="space-y-2">
                  <p class="text-sm text-center text-gray-500 dark:text-gray-400">
                    Get notified when this course launches
                  </p>
                  <button
                    class="w-full py-2.5 px-4 bg-gradient-to-r from-yellow-500 to-yellow-600 hover:from-yellow-600 hover:to-yellow-700 text-white text-sm font-semibold rounded-lg shadow-md hover:shadow-lg transform transition-all duration-200 hover:-translate-y-0.5"
                    disabled
                  >
                    Notify Me
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </section>
    </div>
  </div>
</MainLayout>

<style>
  .text-gradient {
    @apply bg-clip-text text-transparent bg-gradient-to-r from-indigo-600 to-cyan-500;
  }
</style>

<script>
  // Theme toggle functionality
  const theme = (() => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  })();

  if (theme === 'light') {
    document.documentElement.classList.remove('dark');
  } else {
    document.documentElement.classList.add('dark');
  }

  window.localStorage.setItem('theme', theme);

  const handleToggleClick = () => {
    const element = document.documentElement;
    element.classList.toggle('dark');

    const isDark = element.classList.contains('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
  }

  // Add event listener to theme toggle button if it exists
  document.getElementById('theme-toggle')?.addEventListener('click', handleToggleClick);

  const coursesGrid = document.getElementById('courses-grid');
  const searchInput = document.getElementById('search');
  const levelFilter = document.getElementById('level-filter');
  const sortFilter = document.getElementById('sort-filter');
  const token = localStorage.getItem('token');

  // Handle course enrollment
  coursesGrid?.addEventListener('click', async (e) => {
    const target = e.target as HTMLElement;
    if (target.tagName === 'BUTTON' && target.hasAttribute('data-course-id')) {
      e.preventDefault();
      const courseId = target.getAttribute('data-course-id');

      if (!token) {
        window.location.href = '/login';
        return;
      }

      try {
        const response = await fetch(`/api/courses/${courseId}/enroll`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        });

        if (response.ok) {
          target.textContent = 'Enrolled';
          target.classList.add('bg-green-600', 'hover:bg-green-700');
          target.classList.remove('bg-indigo-600', 'hover:bg-indigo-700');
        } else {
          throw new Error('Failed to enroll');
        }
      } catch (error) {
        alert('Failed to enroll in course. Please try again.');
      }
    }
  });

  // Handle search
  let searchTimeout: NodeJS.Timeout;
  searchInput?.addEventListener('input', (e) => {
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(() => {
      // Implement search logic
      const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
      // Update course grid based on search term
    }, 300);
  });

  // Handle filters
  levelFilter?.addEventListener('change', () => {
    // Implement level filter logic
  });

  sortFilter?.addEventListener('change', () => {
    // Implement sort filter logic
  });

  // Broadcast theme changes across tabs
  window.addEventListener('storage', (e) => {
    if (e.key === 'theme') {
      if (e.newValue === 'dark') {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    }
  });
</script>
