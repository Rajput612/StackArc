---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
import CourseSidebarFilter from '../components/CourseSidebarFilter.tsx';
import CourseSorting from '../components/CourseSorting.tsx';

const PUBLIC_API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:8000';

// Get initial URL parameters
const url = Astro.url;
const initialSearchQuery = url.searchParams.get('search') || '';
const initialSelectedLevel = url.searchParams.get('level') || '';
const initialSelectedStatus = url.searchParams.get('status') || '';
const initialOrdering = url.searchParams.get('ordering') || '';
---

<Layout title="Courses">
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <Navbar />
    
    <div class="pt-24 pb-12">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="grid grid-cols-12 gap-8">
          <div class="col-span-12 md:col-span-4 lg:col-span-3 xl:col-span-3">
            <div class="sticky top-24 space-y-6 bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
              <CourseSidebarFilter 
                client:load 
                initialSearchQuery={initialSearchQuery}
                initialSelectedLevel={initialSelectedLevel}
                initialSelectedStatus={initialSelectedStatus}
              />
            </div>
          </div>
          
          <div class="col-span-12 md:col-span-8 lg:col-span-9 xl:col-span-9">
            <div class="flex justify-between items-center mb-8">
              <h1 class="text-3xl font-bold text-gray-900 dark:text-white">
                Available Courses
              </h1>
              
              <div class="w-64">
                <CourseSorting 
                  client:load 
                  initialSort={initialOrdering}
                />
              </div>
            </div>
            
            <div 
              id="debug-info" 
              class="mb-4 p-4 bg-yellow-100 text-yellow-800 rounded-lg hidden"
            >
              <!-- Debug information will be displayed here -->
            </div>

            <div 
              id="courses-container" 
              class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8"
            >
              <!-- Courses will be dynamically rendered here -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script define:vars={{ PUBLIC_API_URL }}>
    // Debug function to log and display information
    const debugLog = (message, isError = false) => {
      const debugInfoElement = document.getElementById('debug-info');
      debugInfoElement.textContent = message;
      debugInfoElement.classList.remove('hidden');
      
      if (isError) {
        debugInfoElement.classList.add('bg-red-100', 'text-red-800');
      }
      
      console.log(message);
    };

    // Global state to track current filters and sorting
    let currentParams = new URLSearchParams(window.location.search);

    // Function to update URL and state
    const updateURLAndState = (params) => {
      const newURL = `${window.location.pathname}?${params.toString()}`;
      window.history.pushState({ path: newURL }, '', newURL);
      currentParams = params;
    };

    // Function to fetch and render courses
    const fetchAndRenderCourses = async () => {
      const coursesContainer = document.getElementById('courses-container');
      
      try {
        // Construct API URL with current parameters
        const apiUrl = new URL(`${PUBLIC_API_URL}/api/courses/`);
        currentParams.forEach((value, key) => {
          apiUrl.searchParams.append(key, value);
        });

        const response = await fetch(apiUrl.toString());
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const courses = await response.json();

        // Render courses
        coursesContainer.innerHTML = courses.map(course => `
          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden relative group">
            <div class="absolute top-4 right-4 z-10">
              <span class="px-3 py-1 text-xs font-semibold rounded-full ${
                course.status === 'coming-soon' 
                  ? 'bg-yellow-100 text-yellow-800 border border-yellow-200' 
                  : 'bg-green-100 text-green-800 border border-green-200'
              }">
                ${course.status === 'coming-soon' ? 'Coming Soon' : 'Available'}
              </span>
            </div>
            
            <div class="p-4 flex flex-col h-full">
              <div class="text-3xl mb-2">${course.icon}</div>
              <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">${course.title}</h3>
              <p class="text-sm text-gray-600 dark:text-gray-300 flex-grow mb-4">${course.description}</p>
              
              <div class="flex items-center justify-between">
                <div class="flex flex-col">
                  <span class="text-xs text-gray-500 dark:text-gray-400">Level: ${course.level}</span>
                  <span class="text-xs text-gray-500 dark:text-gray-400">Topics: ${course.topic_count}</span>
                </div>
                
                <button 
                  class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 rounded-md transition-all duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-105 ${
                    course.status === 'coming-soon' ? 'opacity-50 cursor-not-allowed' : ''
                  }"
                  ${course.status === 'coming-soon' ? 'disabled' : ''}
                >
                  Start Learning
                </button>
              </div>
            </div>
          </div>
        `).join('');

      } catch (error) {
        coursesContainer.innerHTML = `
          <div class="col-span-full text-center py-12 text-red-600">
            Failed to load courses. ${error.message}
          </div>
        `;
      }
    };

    // Event listeners for dynamic filtering
    window.addEventListener('course-filter-change', (event) => {
      const newParams = new URLSearchParams(event.detail.params);
      updateURLAndState(newParams);
      
      fetchAndRenderCourses();
    });

    window.addEventListener('course-sort-change', (event) => {
      const newParams = new URLSearchParams(currentParams);
      newParams.set('ordering', event.detail.sort);
      updateURLAndState(newParams);
      
      fetchAndRenderCourses();
    });

    // Initial fetch
    fetchAndRenderCourses();

    // Handle browser back/forward navigation
    window.addEventListener('popstate', () => {
      currentParams = new URLSearchParams(window.location.search);
      fetchAndRenderCourses();
    });
  </script>
</Layout>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
