---
import MainLayout from '../../../layouts/MainLayout.astro';
import CodePlayground from '../../../components/CodePlayground.jsx';
import CourseSidebar from '../../../components/CourseSidebar.astro';
import PythonNavigation from '../../../components/PythonNavigation.astro';

const basicPropertyCode = `# BankAccount Class: A simple example of Python property decorators
# This class demonstrates how to use properties for data validation and access control

class BankAccount:
    def __init__(self, balance=0):
        # Initialize with a protected attribute (denoted by _)
        self._balance = balance
    
    # Define the balance property getter
    @property
    def balance(self):
        """Get the current balance"""
        return self._balance
    
    # Define the balance property setter with validation
    @balance.setter
    def balance(self, value):
        """Set the balance with validation"""
        # Validate that the value is a number
        if not isinstance(value, (int, float)):
            raise TypeError("Balance must be a number")
        
        # Validate that the value is not negative
        if value < 0:
            raise ValueError("Balance cannot be negative")
        
        # If validation passes, set the balance
        self._balance = value
    
    # Define the balance property deleter
    @balance.deleter
    def balance(self):
        """Delete the balance (reset to 0)"""
        print("Balance being reset to 0")
        self._balance = 0

# Let's create a bank account and try out our property
account = BankAccount(1000)
print("Initial balance: {}".format(account.balance))

# Try updating the balance
print("\\nUpdating balance to $2000...")
account.balance = 2000
print("New balance: ".format(account.balance))

# Try setting an invalid (negative) balance
print("\\nTrying to set negative balance...")
try:
    account.balance = -500
except ValueError as e:
    print("Error: {}".format(e))

# Try deleting (resetting) the balance
print("\\nResetting the balance...")
del account.balance
print("Final balance: {}".format(account.balance))`;

const advancedPropertyCode = `# Temperature Class: An advanced example of Python property decorators
# This class demonstrates computed properties and unit conversions

class Temperature:
    def __init__(self, celsius=0):
        # Store temperature in Celsius as our base unit
        self._celsius = celsius
    
    # Celsius property (base temperature)
    @property
    def celsius(self):
        """Get temperature in Celsius"""
        return self._celsius
    
    @celsius.setter
    def celsius(self, value):
        """Set temperature in Celsius"""
        # Validate the input value
        if not isinstance(value, (int, float)):
            raise TypeError("Temperature must be a number")
        self._celsius = value
    
    # Fahrenheit property (computed from Celsius)
    @property
    def fahrenheit(self):
        """Get temperature in Fahrenheit (computed)"""
        # Convert Celsius to Fahrenheit: °F = (°C × 9/5) + 32
        return (self.celsius * 9/5) + 32
    
    @fahrenheit.setter
    def fahrenheit(self, value):
        """Set temperature in Fahrenheit"""
        # Validate the input value
        if not isinstance(value, (int, float)):
            raise TypeError("Temperature must be a number")
        # Convert Fahrenheit to Celsius: °C = (°F - 32) × 5/9
        self.celsius = (value - 32) * 5/9
    
    # Kelvin property (computed from Celsius)
    @property
    def kelvin(self):
        """Get temperature in Kelvin (computed)"""
        # Convert Celsius to Kelvin: K = °C + 273.15
        return self.celsius + 273.15
    
    @kelvin.setter
    def kelvin(self, value):
        """Set temperature in Kelvin"""
        # Validate the input value
        if not isinstance(value, (int, float)):
            raise TypeError("Temperature must be a number")
        # Convert Kelvin to Celsius: °C = K - 273.15
        self.celsius = value - 273.15
    
    def __str__(self):
        """String representation showing all units"""
        return "Temperature:\\n  {:.2f}°C\\n  {:.2f}°F\\n  {:.2f}K".format(
            self.celsius,
            self.fahrenheit,
            self.kelvin
        )

# Create a temperature object at room temperature (25°C)
temp = Temperature(25)
print("Room temperature:")
print(temp)

# Convert to body temperature (98.6°F)
print("\\nBody temperature:")
temp.fahrenheit = 98.6
print(temp)

# Convert to a nice round Kelvin value (300K)
print("\\nRound Kelvin value:")
temp.kelvin = 300
print(temp)

# Set to freezing point of water (0°C)
print("\\nFreezing point of water:")
temp.celsius = 0
print(temp)

`;

---

<MainLayout title="Python Property Decorators">
  <div class="flex">
    <CourseSidebar courseType="python-advanced" currentTopicId="property-decorators" />
    <div class="flex-1 p-8 overflow-y-auto">
      <div class="max-w-4xl mx-auto">
        <PythonNavigation currentPath={Astro.url.pathname} />
        <h1 class="text-3xl font-bold mb-8">Python Property Decorators</h1>

        <div class="bg-yellow-50 rounded-lg p-6 mb-8">
          <h2 class="text-xl font-semibold mb-4">Overview</h2>
          <p class="mb-4">
            Property decorators in Python provide a way to customize attribute access, making your code more maintainable 
            and encapsulated. Let's explore how they work and their practical applications.
          </p>
        </div>

        <section class="mb-12">
          <h2 class="text-2xl font-semibold mb-4">Basic Properties</h2>
          <div class="bg-white dark:bg-gray-800 rounded-lg p-6">
            <p class="mb-4">
              Let's start with a basic example using a BankAccount class. This demonstrates how to use properties 
              for data validation and controlled access to attributes.
            </p>
            <CodePlayground 
              client:load 
              initialCode={basicPropertyCode}
              language="python"
            />
          </div>
        </section>

        <section class="mb-12">
          <h2 class="text-2xl font-semibold mb-4">Advanced Properties</h2>
          <div class="bg-white dark:bg-gray-800 rounded-lg p-6">
            <p class="mb-4">
              Now let's explore a more complex example with computed properties. This Temperature class automatically 
              converts between different temperature scales.
            </p>
            <CodePlayground 
              client:load 
              initialCode={advancedPropertyCode}
              language="python"
            />
          </div>
        </section>

        <section class="mb-12">
          <h2 class="text-2xl font-semibold mb-4">What We've Learned</h2>
          <div class="bg-green-50 dark:bg-gray-800 rounded-lg p-6">
            <ul class="list-disc ml-6 space-y-2">
              <li>How to use the <code>@property</code> decorator</li>
              <li>Implementing getters, setters, and deleters</li>
              <li>Data validation with properties</li>
              <li>Creating computed properties</li>
              <li>Converting between different units</li>
              <li>Maintaining clean interfaces</li>
            </ul>
          </div>
        </section>

        <div class="bg-blue-50 rounded-lg p-6">
          <h2 class="text-xl font-semibold mb-4">Challenge Ideas</h2>
          <ul class="list-disc ml-6 space-y-2">
            <li>Create a Rectangle class with computed area and perimeter properties</li>
            <li>Build a Password class that validates and hashes passwords</li>
            <li>Implement a Date class with properties for different date formats</li>
            <li>Design a Currency class with conversion properties</li>
            <li>Create a File class with properties for size in different units</li>
            <li>Build a Vector class with magnitude and angle properties</li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</MainLayout>
