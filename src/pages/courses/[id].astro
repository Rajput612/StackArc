---
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
  const API_URL = import.meta.env.PUBLIC_API_URL || 'http://127.0.0.1:8000';
  
  try {
    const response = await fetch(`${API_URL}/api/courses/`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const courses = await response.json();
    
    return courses.map(course => ({
      params: { 
        id: course.slug || 'default-course' // Ensure a fallback value
      },
      props: { 
        course,
        courseId: course.slug || 'default-course' // Ensure a fallback value
      }
    }));
  } catch (error) {
    console.error('Error fetching courses for static paths:', error);
    return [{ 
      params: { id: 'default-course' },
      props: { 
        course: null,
        courseId: 'default-course'
      }
    }];
  }
}

const { id } = Astro.params;
const { course, courseId } = Astro.props;

const API_URL = import.meta.env.PUBLIC_API_URL || 'http://127.0.0.1:8000';

// If course is not passed via props, fetch it
let fetchedCourse = course;
let error = null;

if (!fetchedCourse) {
  try {
    const response = await fetch(`${API_URL}/api/courses/${courseId || id}/`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    fetchedCourse = await response.json();
  } catch (e) {
    console.error('Error fetching course:', e);
    error = 'Failed to load course details. Please try again later.';
  }
}

// Redirect if course not found
if (!fetchedCourse && !error) {
  return Astro.redirect('/courses');
}
---

<Layout title={fetchedCourse ? `${fetchedCourse.title} - StackArc` : 'Course Not Found'}>
  <main class="container mx-auto px-4 py-8">
    {error && (
      <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-6" role="alert">
        <span class="block sm:inline">{error}</span>
      </div>
    )}

    {fetchedCourse && (
      <div class="max-w-4xl mx-auto">
        <!-- Course Header -->
        <div class="mb-8">
          <div class="flex items-center gap-4 mb-4">
            <span class="text-5xl" role="img" aria-label="Course icon">
              {fetchedCourse.icon}
            </span>
            <div>
              <h1 class="text-4xl font-bold text-gray-900 dark:text-white">
                {fetchedCourse.title}
              </h1>
              <div class="flex items-center gap-4 mt-2">
                <span class={`px-3 py-1 rounded-full text-sm font-medium
                  ${fetchedCourse.level === 'Beginner' ? 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-200' :
                    fetchedCourse.level === 'Intermediate' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-200' :
                    'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-200'}`}>
                  {fetchedCourse.level}
                </span>
                <span class="text-gray-600 dark:text-gray-400">
                  {fetchedCourse.topic_count} Topics
                </span>
              </div>
            </div>
          </div>
          <p class="text-xl text-gray-600 dark:text-gray-300">
            {fetchedCourse.description}
          </p>
        </div>

        <!-- Topics List -->
        {fetchedCourse.topics && (
          <div class="space-y-6">
            <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">
              Course Content
            </h2>
            <div class="space-y-4">
              {fetchedCourse.topics.map((topic, index) => (
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
                  <div class="flex items-center justify-between">
                    <div>
                      <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                        {topic.title}
                      </h3>
                      <p class="text-gray-600 dark:text-gray-300 mt-1">
                        {topic.description}
                      </p>
                    </div>
                    {topic.is_preview && (
                      <span class="px-3 py-1 bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-200 rounded-full text-sm">
                        Preview
                      </span>
                    )}
                  </div>
                  {topic.exercises && (
                    <div class="mt-4 pl-6 border-l-2 border-gray-200 dark:border-gray-700">
                      <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Exercises
                      </h4>
                      <ul class="space-y-2">
                        {topic.exercises.map((exercise, exerciseIndex) => (
                          <li class="text-gray-600 dark:text-gray-400">
                            {exercise.title}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        <!-- Call to Action -->
        <div class="mt-12 text-center">
          <button
            id="start-learning-btn"
            data-course-slug={fetchedCourse.slug}
            class="px-8 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
          >
            Start Learning
          </button>
        </div>
      </div>
    )}
  </main>

  <script define:vars={{ courseSlug: fetchedCourse?.slug }}>
    document.addEventListener('DOMContentLoaded', () => {
      const startLearningBtn = document.getElementById('start-learning-btn');
      
      if (startLearningBtn) {
        startLearningBtn.addEventListener('click', () => {
          const courseSlug = startLearningBtn.getAttribute('data-course-slug');
          
          // Define specific redirections
          const redirectMap = {
            'python-basics': '/courses/python-basics',
            'python-advanced': '/courses/python-advanced'
          };

          // Redirect based on course slug
          const redirectUrl = redirectMap[courseSlug] || `/courses/${courseSlug}`;
          
          window.location.href = redirectUrl;
        });
      }
    });
  </script>
</Layout>

<style>
  main {
    min-height: calc(100vh - 64px);
  }
</style>
