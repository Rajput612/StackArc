---
import MainLayout from '../../../layouts/MainLayout.astro';
import CodePlayground from '../../../components/CodePlayground.jsx';
import CourseSidebar from '../../../components/CourseSidebar.astro';

const basicTodoCode = `# Simple Todo List Application
class TodoList:
    def __init__(self):
        self.tasks = []
    
    def add_task(self, task):
        """Add a new task to the list"""
        self.tasks.append({"task": task, "completed": False})
        print(f"Task added: {task}")
    
    def view_tasks(self):
        """Display all tasks with their status"""
        if not self.tasks:
            print("No tasks in the list!")
            return
        
        print("\nYour Todo List:")
        for i, task in enumerate(self.tasks, 1):
            status = "✓" if task["completed"] else " "
            print(f"{i}. [{status}] {task['task']}")
    
    def mark_completed(self, task_index):
        """Mark a task as completed"""
        if 1 <= task_index <= len(self.tasks):
            self.tasks[task_index-1]["completed"] = True
            print(f"Task {task_index} marked as completed!")
        else:
            print("Invalid task number!")
    
    def remove_task(self, task_index):
        """Remove a task from the list"""
        if 1 <= task_index <= len(self.tasks):
            removed_task = self.tasks.pop(task_index-1)
            print(f"Removed task: {removed_task['task']}")
        else:
            print("Invalid task number!")

# Example Usage:
todo = TodoList()
todo.add_task("Learn Python OOP")
todo.add_task("Build a project")
todo.view_tasks()
todo.mark_completed(1)
todo.view_tasks()
todo.remove_task(2)
todo.view_tasks()`;

const enhancedTodoCode = `# Enhanced Todo List with File Storage and Due Dates
import json
from datetime import datetime, timedelta

class EnhancedTodoList:
    def __init__(self, filename="todos.json"):
        self.filename = filename
        self.tasks = self.load_tasks()
    
    def load_tasks(self):
        """Load tasks from file"""
        try:
            with open(self.filename, 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            return []
    
    def save_tasks(self):
        """Save tasks to file"""
        with open(self.filename, 'w') as f:
            json.dump(self.tasks, f, indent=2)
    
    def add_task(self, task, due_days=None, priority="normal"):
        """Add a new task with due date and priority"""
        due_date = None
        if due_days:
            due_date = (datetime.now() + timedelta(days=due_days)).strftime("%Y-%m-%d")
        
        self.tasks.append({
            "task": task,
            "completed": False,
            "created_date": datetime.now().strftime("%Y-%m-%d"),
            "due_date": due_date,
            "priority": priority
        })
        self.save_tasks()
        print(f"Added task: {task}")
    
    def view_tasks(self, show_completed=True):
        """Display tasks with due dates and priority"""
        if not self.tasks:
            print("No tasks in the list!")
            return
        
        print("\nYour Todo List:")
        for i, task in enumerate(self.tasks, 1):
            if not show_completed and task["completed"]:
                continue
                
            status = "✓" if task["completed"] else " "
            due = f"(Due: {task['due_date']})" if task['due_date'] else ""
            priority = f"[{task['priority'].upper()}]"
            
            print(f"{i}. [{status}] {priority} {task['task']} {due}")

# Example Usage:
todo = EnhancedTodoList()
todo.add_task("Complete project", due_days=7, priority="high")
todo.add_task("Review code", priority="normal")
todo.add_task("Update documentation", due_days=3, priority="low")
todo.view_tasks()`;

---

<MainLayout title="Todo List Project">
  <div class="flex">
    <CourseSidebar courseType="python-basics" currentTopicId="todo-list" />
    
    <div class="flex-1 p-8 overflow-y-auto">
      <div class="max-w-4xl mx-auto">
        <h1 class="text-3xl font-bold mb-8">Building a Todo List in Python</h1>

        <div class="bg-yellow-50 rounded-lg p-6 mb-8">
          <h2 class="text-xl font-semibold mb-4">Project Overview</h2>
          <p class="mb-4">
            Let's create a todo list application that helps users manage their tasks. We'll start with a basic version 
            and then enhance it with features like file storage and due dates!
          </p>
        </div>

        <section class="mb-12">
          <h2 class="text-2xl font-semibold mb-4">Basic Todo List</h2>
          <div class="bg-white dark:bg-gray-800 rounded-lg p-6">
            <p class="mb-4">
              Our first version will handle adding, viewing, completing, and removing tasks. Try running the code and managing some tasks!
            </p>
            <CodePlayground 
              client:load 
              initialCode={basicTodoCode}
              language="python"
            />
          </div>
        </section>

        <section class="mb-12">
          <h2 class="text-2xl font-semibold mb-4">Enhanced Todo List</h2>
          <div class="bg-white dark:bg-gray-800 rounded-lg p-6">
            <p class="mb-4">
              Now let's add file storage, due dates, and priority levels. This version persists your tasks and helps you track deadlines!
            </p>
            <CodePlayground 
              client:load 
              initialCode={enhancedTodoCode}
              language="python"
            />
          </div>
        </section>

        <section class="mb-12">
          <h2 class="text-2xl font-semibold mb-4">What We've Learned</h2>
          <div class="bg-green-50 dark:bg-gray-800 rounded-lg p-6">
            <ul class="list-disc ml-6 space-y-2">
              <li>Creating classes and methods in Python</li>
              <li>Working with lists and dictionaries</li>
              <li>File handling with JSON</li>
              <li>Date and time operations</li>
              <li>Error handling with try-except</li>
              <li>Building a user-friendly interface</li>
            </ul>
          </div>
        </section>

        <div class="bg-blue-50 rounded-lg p-6">
          <h2 class="text-xl font-semibold mb-4">Challenge Ideas</h2>
          <ul class="list-disc ml-6 space-y-2">
            <li>Add categories or tags for tasks</li>
            <li>Implement task search and filtering</li>
            <li>Add recurring tasks feature</li>
            <li>Create a GUI using tkinter</li>
            <li>Add multi-user support</li>
            <li>Implement task sharing between users</li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</MainLayout>
