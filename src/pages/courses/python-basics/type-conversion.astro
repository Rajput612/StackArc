---
import MainLayout from '../../../layouts/MainLayout.astro';
import CodePlayground from '../../../components/CodePlayground.jsx';
import CourseSidebar from '../../../components/CourseSidebar.astro';

const implicitConversionCode = `# Implicit Type Conversion
x = 10      # Integer
y = 3.14    # Float
z = x + y   # Automatically converted to float
print(z)    # 13.14
print(type(z))  # <class 'float'>

# Another example
a = 5
b = 2.0
result = a / b  # Integer divided by float
print(result)   # 2.5 (float)`;

const explicitConversionCode = `# Integer Conversion
x = int("10")       # String to Integer
y = int(3.14)       # Float to Integer
print(x, y)         # 10 3

# Float Conversion
a = float("3.14")   # String to Float
b = float(42)       # Integer to Float
print(a, b)         # 3.14 42.0

# String Conversion
s1 = str(42)        # Integer to String
s2 = str(3.14)      # Float to String
print(s1, s2)       # "42" "3.14"

# Boolean Conversion
bool1 = bool(1)     # Non-zero numbers are True
bool2 = bool(0)     # Zero is False
bool3 = bool("")    # Empty string is False
print(bool1, bool2, bool3)  # True False False`;

const typeCheckingCode = `# Type Checking Functions
x = 10
y = "Hello"
z = 3.14

print(type(x))      # <class 'int'>
print(type(y))      # <class 'str'>
print(type(z))      # <class 'float'>

# Type Checking with isinstance()
print(isinstance(x, int))       # True
print(isinstance(y, str))       # True
print(isinstance(z, (int, float)))  # True`;

const conversionPitfallsCode = `# Conversion Errors
try:
    # This will raise a ValueError
    x = int("hello")
except ValueError as e:
    print("Conversion Error:", e)

try:
    # Floating point conversion
    y = float("3.14")
    z = float("not a number")
except ValueError as e:
    print("Float Conversion Error:", e)`;

const ageVerificationCode = `# Age Verification Challenge
# Challenge: Create a user registration system 
# that validates age and provides appropriate access

def verify_user_access(age_str):
    try:
        # Convert string to integer
        age = int(age_str)
        
        # Validate age range
        if age < 0:
            return "Invalid age! Age cannot be negative."
        elif age < 13:
            return "Access Denied: Too young for this platform."
        elif 13 <= age < 18:
            return "Limited Access: Parental consent required."
        elif 18 <= age < 65:
            return "Full Access Granted!"
        else:
            return "Senior Access: Special features available."
    
    except ValueError:
        return "Invalid input. Please enter a valid numeric age."

# Interactive User Input
def main():
    print("🔒 User Registration System")
    age_input = input("Enter your age: ")
    result = verify_user_access(age_input)
    print(result)

# Uncomment to run
# main()`;

const ageVerificationSolution = `# Age Verification Solution
# Comprehensive user registration system with type conversion

def verify_user_access(age_str):
    try:
        # Convert string to integer with error handling
        age = int(age_str)
        
        # Detailed age-based access control
        if age < 0:
            return "❌ Invalid age! Age cannot be negative."
        elif age < 13:
            return "🚫 Access Denied: Too young for this platform."
        elif 13 <= age < 18:
            return "🔒 Limited Access: Parental consent required."
        elif 18 <= age < 65:
            return "✅ Full Access Granted! Welcome to the platform."
        else:
            return "🌟 Senior Access: Special features available."
    
    except ValueError:
        return "❗ Invalid input. Please enter a valid numeric age."

# Interactive User Registration
def main():
    print("🔐 Secure User Registration System")
    while True:
        age_input = input("Enter your age (or 'q' to quit): ")
        
        # Option to quit
        if age_input.lower() == 'q':
            print("Thank you for using our registration system!")
            break
        
        result = verify_user_access(age_input)
        print(result)
        print()  # Add a blank line for readability

# Uncomment to run
# main()`;

const temperatureConverterCode = `# Temperature Converter Challenge
# Challenge: Create a temperature conversion tool
# that supports Celsius and Fahrenheit conversions

def convert_temperature(temp_str, scale):
    try:
        # Convert string to float
        temp = float(temp_str)
        
        # Normalize scale input
        scale = scale.upper()
        
        # Temperature conversion logic
        if scale == 'C':
            # Celsius to Fahrenheit
            fahrenheit = (temp * 9/5) + 32
            return f"{temp}°C is equal to {fahrenheit:.2f}°F"
        elif scale == 'F':
            # Fahrenheit to Celsius
            celsius = (temp - 32) * 5/9
            return f"{temp}°F is equal to {celsius:.2f}°C"
        else:
            return "Invalid scale. Use 'C' for Celsius or 'F' for Fahrenheit."
    
    except ValueError:
        return "Invalid temperature input. Please enter a numeric value."

# Interactive Temperature Converter
def main():
    print("🌡️ Temperature Converter")
    temp_input = input("Enter temperature value: ")
    scale_input = input("Enter scale (C/F): ")
    
    result = convert_temperature(temp_input, scale_input)
    print(result)

# Uncomment to run
# main()`;

const temperatureConverterSolution = `# Temperature Converter Solution
# Comprehensive temperature conversion tool with robust error handling

def convert_temperature(temp_str, scale):
    try:
        # Robust type conversion with float
        temp = float(temp_str)
        
        # Normalize scale input
        scale = scale.upper()
        
        # Comprehensive temperature conversion
        if scale == 'C':
            # Celsius to Fahrenheit with range validation
            if temp < -273.15:
                return "❄️ Error: Temperature below absolute zero for Celsius!"
            
            fahrenheit = (temp * 9/5) + 32
            return f"🌡️ {temp}°C is equal to {fahrenheit:.2f}°F"
        
        elif scale == 'F':
            # Fahrenheit to Celsius with range validation
            if temp < -459.67:
                return "❄️ Error: Temperature below absolute zero for Fahrenheit!"
            
            celsius = (temp - 32) * 5/9
            return f"🌡️ {temp}°F is equal to {celsius:.2f}°C"
        
        else:
            return "❗ Invalid scale. Use 'C' for Celsius or 'F' for Fahrenheit."
    
    except ValueError:
        return "❗ Invalid temperature input. Please enter a numeric value."

# Interactive Temperature Conversion Tool
def main():
    print("🌡️ Advanced Temperature Converter")
    while True:
        print("\nConversion Options:")
        print("1. Celsius to Fahrenheit")
        print("2. Fahrenheit to Celsius")
        print("3. Quit")
        
        choice = input("Enter your choice (1/2/3): ")
        
        if choice == '3':
            print("Thank you for using the Temperature Converter!")
            break
        
        if choice in ['1', '2']:
            temp_input = input("Enter temperature value: ")
            
            if choice == '1':
                result = convert_temperature(temp_input, 'C')
            else:
                result = convert_temperature(temp_input, 'F')
            
            print(result)
        else:
            print("Invalid choice. Please select 1, 2, or 3.")

# Uncomment to run
# main()`;
---

<MainLayout title="Python Type Conversion">
  <div class="flex">
    <CourseSidebar courseType="python-basics" />
    <div class="flex-1 max-w-4xl mx-auto px-4 py-8">
      <h1 class="text-3xl font-bold mb-8">Type Conversion in Python</h1>

      <section class="mb-12">
        <h2 class="text-2xl font-semibold mb-4">Implicit Type Conversion</h2>
        <div class="bg-gray-800 rounded-lg p-6">
          <p class="mb-4">Python automatically converts one data type to another without user intervention.</p>
          <CodePlayground 
            client:load 
            initialCode={implicitConversionCode}
            language="python"
          />
        </div>
      </section>

      <section class="mb-12">
        <h2 class="text-2xl font-semibold mb-4">Explicit Type Conversion</h2>
        <div class="bg-gray-800 rounded-lg p-6">
          <p class="mb-4">Manually converting one data type to another using built-in functions.</p>
          <CodePlayground 
            client:load 
            initialCode={explicitConversionCode}
            language="python"
          />
        </div>
      </section>

      <section class="mb-12">
        <h2 class="text-2xl font-semibold mb-4">Type Checking</h2>
        <div class="bg-gray-800 rounded-lg p-6">
          <p class="mb-4">Methods to check and verify data types.</p>
          <CodePlayground 
            client:load 
            initialCode={typeCheckingCode}
            language="python"
          />
        </div>
      </section>

      <section class="mb-12">
        <h2 class="text-2xl font-semibold mb-4">Common Conversion Pitfalls</h2>
        <div class="bg-gray-800 rounded-lg p-6">
          <p class="mb-4">Be careful with type conversions that might raise exceptions.</p>
          <CodePlayground 
            client:load 
            initialCode={conversionPitfallsCode}
            language="python"
          />
        </div>
      </section>

      <section class="mb-12">
        <h2 class="text-2xl font-semibold mb-4">Practice Problems</h2>
        <div class="bg-gray-800 rounded-lg p-6">
          <h3 class="text-xl font-semibold mb-4">Type Conversion Challenges</h3>
          <div class="space-y-8">
            <div class="bg-gray-700 rounded-lg p-6">
              <h4 class="text-lg font-semibold mb-3">🔢 Challenge 1: Age Verification</h4>
              <p class="text-gray-300 mb-4">Create a program that converts age from string to integer and verifies user access.</p>
              
              <div class="grid md:grid-cols-2 gap-6">
                <div>
                  <h5 class="font-semibold mb-2">🎯 Learning Objectives</h5>
                  <ul class="list-disc list-inside text-gray-300 space-y-2">
                    <li>Convert string to integer</li>
                    <li>Implement access control logic</li>
                    <li>Use error handling techniques</li>
                  </ul>
                </div>
                
                <div>
                  <h5 class="font-semibold mb-2">🚀 Challenge Hints</h5>
                  <ul class="list-disc list-inside text-gray-300 space-y-2">
                    <li>Use <code>int()</code> for conversion</li>
                    <li>Implement <code>try-except</code> block</li>
                    <li>Add age range validation</li>
                    <li>Provide meaningful error messages</li>
                  </ul>
                </div>
              </div>
              
              <div class="mt-6">
                <CodePlayground 
                  client:load 
                  id="age-verification-challenge"
                  initialCode={ageVerificationCode}
                  language="python"
                  solution={ageVerificationSolution}
                />
              </div>
            </div>
            
            <div class="bg-gray-700 rounded-lg p-6">
              <h4 class="text-lg font-semibold mb-3">🌡️ Challenge 2: Temperature Converter</h4>
              <p class="text-gray-300 mb-4">Develop a program that converts temperature between Celsius and Fahrenheit with type conversion.</p>
              
              <div class="grid md:grid-cols-2 gap-6">
                <div>
                  <h5 class="font-semibold mb-2">🎯 Learning Objectives</h5>
                  <ul class="list-disc list-inside text-gray-300 space-y-2">
                    <li>Convert string to float</li>
                    <li>Perform temperature calculations</li>
                    <li>Handle different input scales</li>
                    <li>Implement robust error handling</li>
                  </ul>
                </div>
                
                <div>
                  <h5 class="font-semibold mb-2">🚀 Challenge Hints</h5>
                  <ul class="list-disc list-inside text-gray-300 space-y-2">
                    <li>Use <code>float()</code> for conversion</li>
                    <li>Implement conversion formulas</li>
                    <li>Add scale validation</li>
                    <li>Handle potential conversion errors</li>
                  </ul>
                </div>
              </div>
              
              <div class="mt-6">
                <CodePlayground 
                  client:load 
                  id="temperature-converter-challenge"
                  initialCode={temperatureConverterCode}
                  language="python"
                  solution={temperatureConverterSolution}
                />
              </div>
            </div>
          </div>
        </div>
      </section>
    </div>
  </div>
</MainLayout>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleContainers = document.querySelectorAll('.solution-toggle');
    
    toggleContainers.forEach(container => {
      const toggleBtn = container.querySelector('.solution-toggle-btn');
      const codePlayground = container.closest('.bg-gray-700').querySelector('code-playground');
      
      if (!codePlayground) return;
      
      toggleBtn.addEventListener('click', () => {
        // Check if solution attribute exists
        const solutionCode = codePlayground.getAttribute('solution');
        const initialCode = codePlayground.getAttribute('initialCode');
        
        if (!solutionCode) return;
        
        if (toggleBtn.textContent.includes('Show Solution')) {
          // Store current code before replacing
          codePlayground.setAttribute('user-code', initialCode);
          
          // Replace code with solution
          codePlayground.setAttribute('initialCode', solutionCode);
          
          // Reload the CodePlayground
          const event = new Event('reload');
          codePlayground.dispatchEvent(event);
          
          toggleBtn.textContent = '👁️ Hide Solution';
        } else {
          // Retrieve and restore user's previous code
          const previousCode = codePlayground.getAttribute('user-code') || initialCode;
          
          // Restore initial code
          codePlayground.setAttribute('initialCode', previousCode);
          
          // Reload the CodePlayground
          const event = new Event('reload');
          codePlayground.dispatchEvent(event);
          
          toggleBtn.textContent = '👁️ Show Solution';
        }
      });
    });
  });
</script>

<style>
  code {
    @apply bg-gray-700 px-1 rounded text-sm;
  }
</style>
