---
import MainLayout from '../../../layouts/MainLayout.astro';
import CourseSidebar from '../../../components/CourseSidebar.astro';
import CodePlayground from '../../../components/CodePlayground.astro';
---

<MainLayout title="Python Type Conversion">
  <div class="flex">
    <CourseSidebar courseType="python-basics" />
    <div class="flex-1 max-w-4xl mx-auto px-4 py-8">
      <h1 class="text-3xl font-bold mb-8">Type Conversion in Python</h1>

      <section class="mb-12">
        <h2 class="text-2xl font-semibold mb-4">Implicit Type Conversion</h2>
        <div class="bg-gray-800 rounded-lg p-6">
          <p class="mb-4">Python automatically converts one data type to another without user intervention.</p>
          <CodePlayground 
            client:load 
            initialCode={`# Implicit Conversion
x = 10      # Integer
y = 3.14    # Float
z = x + y   # Automatically converted to float
print(z)    # 13.14
print(type(z))  # <class 'float'>

# Another example
a = 5
b = 2.0
result = a / b  # Integer divided by float
print(result)   # 2.5 (float)`} 
          />
        </div>
      </section>

      <section class="mb-12">
        <h2 class="text-2xl font-semibold mb-4">Explicit Type Conversion</h2>
        <div class="bg-gray-800 rounded-lg p-6">
          <p class="mb-4">Manually converting one data type to another using built-in functions.</p>
          <CodePlayground 
            client:load 
            initialCode={`# Integer Conversion
x = int("10")       # String to Integer
y = int(3.14)       # Float to Integer
print(x, y)         # 10 3

# Float Conversion
a = float("3.14")   # String to Float
b = float(42)       # Integer to Float
print(a, b)         # 3.14 42.0

# String Conversion
s1 = str(42)        # Integer to String
s2 = str(3.14)      # Float to String
print(s1, s2)       # "42" "3.14"

# Boolean Conversion
bool1 = bool(1)     # Non-zero numbers are True
bool2 = bool(0)     # Zero is False
bool3 = bool("")    # Empty string is False
print(bool1, bool2, bool3)  # True False False`} 
          />
        </div>
      </section>

      <section class="mb-12">
        <h2 class="text-2xl font-semibold mb-4">Type Checking</h2>
        <div class="bg-gray-800 rounded-lg p-6">
          <p class="mb-4">Methods to check and verify data types.</p>
          <CodePlayground 
            client:load 
            initialCode={`# Type Checking Functions
x = 10
y = "Hello"
z = 3.14

print(type(x))      # <class 'int'>
print(type(y))      # <class 'str'>
print(type(z))      # <class 'float'>

# Type Checking with isinstance()
print(isinstance(x, int))       # True
print(isinstance(y, str))       # True
print(isinstance(z, (int, float)))  # True`} 
          />
        </div>
      </section>

      <section class="mb-12">
        <h2 class="text-2xl font-semibold mb-4">Common Conversion Pitfalls</h2>
        <div class="bg-gray-800 rounded-lg p-6">
          <p class="mb-4">Be careful with type conversions that might raise exceptions.</p>
          <CodePlayground 
            client:load 
            initialCode={`# Conversion Errors
try:
    # This will raise a ValueError
    x = int("hello")
except ValueError as e:
    print("Conversion Error:", e)

try:
    # Floating point conversion
    y = float("3.14")
    z = float("not a number")
except ValueError as e:
    print("Float Conversion Error:", e)`} 
          />
        </div>
      </section>

      <section class="mb-12">
        <h2 class="text-2xl font-semibold mb-4">Practice Problems</h2>
        <div class="bg-gray-800 rounded-lg p-6">
          <h3 class="text-xl font-semibold mb-4">Type Conversion Challenges</h3>
          <div class="space-y-8">
            <div class="bg-gray-700 rounded-lg p-6">
              <h4 class="text-lg font-semibold mb-3">üî¢ Challenge 1: Age Verification</h4>
              <p class="text-gray-300 mb-4">Create a program that converts age from string to integer and verifies user access.</p>
              
              <div class="grid md:grid-cols-2 gap-6">
                <div>
                  <h5 class="font-semibold mb-2">üéØ Learning Objectives</h5>
                  <ul class="list-disc list-inside text-gray-300 space-y-2">
                    <li>Convert string to integer</li>
                    <li>Implement access control logic</li>
                    <li>Use error handling techniques</li>
                  </ul>
                </div>
                
                <div>
                  <h5 class="font-semibold mb-2">üöÄ Challenge Hints</h5>
                  <ul class="list-disc list-inside text-gray-300 space-y-2">
                    <li>Use <code>int()</code> for conversion</li>
                    <li>Implement <code>try-except</code> block</li>
                    <li>Add age range validation</li>
                    <li>Provide meaningful error messages</li>
                  </ul>
                </div>
              </div>
              
              <div class="mt-6">
                <CodePlayground 
                  client:load 
                  initialCode={`# Age Verification Challenge
# TODO: Convert string age to integer and check adult status
# Hint: Use int() for type conversion
# Handle potential conversion errors

# Get age as string input
age_str = input("Enter your age: ")

# TODO: Add code to convert age and check adult status`}
                  solution={`# Age Verification Solution
# Real-world scenario: User registration access control

try:
    # Get age as string input
    age_str = input("Enter your age: ")
    
    # Convert and validate age
    age = int(age_str)
    
    # Implement access control with type conversion
    if age < 0:
        print("Invalid age! Age cannot be negative.")
    elif age < 13:
        print("Access Denied: Too young for this platform.")
    elif 13 <= age < 18:
        print("Limited Access: Parental consent required.")
        print("You can access basic features.")
    elif 18 <= age < 65:
        print("Full Access Granted!")
        print("Welcome to all platform features.")
    else:
        print("Senior Access: Special features available.")

except ValueError:
    print("Invalid input. Please enter a valid numeric age.")
except Exception as e:
    print(f"An unexpected error occurred: {e}")`} 
                />
              </div>

              <div class="mt-6">
                <div class="solution-toggle">
                  <button 
                    class="solution-toggle-btn flex items-center justify-center bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-300 ease-in-out mb-4"
                  >
                    üëÅÔ∏è Show Solution
                  </button>
                </div>
              </div>
            </div>
            
            <div class="bg-gray-700 rounded-lg p-6">
              <h4 class="text-lg font-semibold mb-3">üå°Ô∏è Challenge 2: Temperature Converter</h4>
              <p class="text-gray-300 mb-4">Develop a program that converts temperature between Celsius and Fahrenheit with type conversion.</p>
              
              <div class="grid md:grid-cols-2 gap-6">
                <div>
                  <h5 class="font-semibold mb-2">üéØ Learning Objectives</h5>
                  <ul class="list-disc list-inside text-gray-300 space-y-2">
                    <li>Convert string to float</li>
                    <li>Perform temperature calculations</li>
                    <li>Handle different input scales</li>
                    <li>Implement robust error handling</li>
                  </ul>
                </div>
                
                <div>
                  <h5 class="font-semibold mb-2">üöÄ Challenge Hints</h5>
                  <ul class="list-disc list-inside text-gray-300 space-y-2">
                    <li>Use <code>float()</code> for conversion</li>
                    <li>Implement conversion formulas</li>
                    <li>Add scale validation</li>
                    <li>Handle potential conversion errors</li>
                  </ul>
                </div>
              </div>
              
              <div class="mt-6">
                <CodePlayground 
                  client:load 
                  initialCode={`# Temperature Converter Challenge
# TODO: Convert temperature between Celsius and Fahrenheit
# Hint: Use float() to convert string inputs
# Handle different temperature scales

# Get user inputs
temp_str = input("Enter temperature value: ")
scale = input("Enter scale (C for Celsius, F for Fahrenheit): ").upper()

# TODO: Add code to convert temperature and print result`}
                  solution={`# Temperature Converter Solution
# Real-world scenario: Weather and scientific temperature conversion

try:
    # Get user inputs with type conversion
    temp_str = input("Enter temperature value: ")
    scale = input("Enter scale (C for Celsius, F for Fahrenheit): ").upper()
    
    # Convert temperature with validation
    temp = float(temp_str)
    
    # Perform temperature conversion
    if scale == 'C':
        fahrenheit = (temp * 9/5) + 32
        print(f"{temp}¬∞C is equal to {fahrenheit:.2f}¬∞F")
    elif scale == 'F':
        celsius = (temp - 32) * 5/9
        print(f"{temp}¬∞F is equal to {celsius:.2f}¬∞C")
    else:
        print("Invalid scale. Please use 'C' or 'F'.")

except ValueError:
    print("Invalid input. Please enter a valid numeric temperature.")
except Exception as e:
    print(f"An unexpected error occurred: {e}")`} 
                />
              </div>

              <div class="mt-6">
                <div class="solution-toggle">
                  <button 
                    class="solution-toggle-btn flex items-center justify-center bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-300 ease-in-out mb-4"
                  >
                    üëÅÔ∏è Show Solution
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </div>
  </div>
</MainLayout>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleContainers = document.querySelectorAll('.solution-toggle');
    
    toggleContainers.forEach(container => {
      const toggleBtn = container.querySelector('.solution-toggle-btn');
      const codePlayground = container.closest('.bg-gray-700').querySelector('code-playground');
      
      if (!codePlayground) return;
      
      toggleBtn.addEventListener('click', () => {
        // Check if solution attribute exists
        const solutionCode = codePlayground.getAttribute('solution');
        const initialCode = codePlayground.getAttribute('initial-code');
        
        if (!solutionCode) return;
        
        if (toggleBtn.textContent.includes('Show Solution')) {
          // Store current code before replacing
          codePlayground.setAttribute('user-code', initialCode);
          
          // Replace code with solution
          codePlayground.setAttribute('initial-code', solutionCode);
          
          // Reload the CodePlayground
          const event = new Event('reload');
          codePlayground.dispatchEvent(event);
          
          toggleBtn.textContent = 'üëÅÔ∏è Hide Solution';
        } else {
          // Retrieve and restore user's previous code
          const previousCode = codePlayground.getAttribute('user-code') || initialCode;
          
          // Restore initial code
          codePlayground.setAttribute('initial-code', previousCode);
          
          // Reload the CodePlayground
          const event = new Event('reload');
          codePlayground.dispatchEvent(event);
          
          toggleBtn.textContent = 'üëÅÔ∏è Show Solution';
        }
      });
    });
  });
</script>

<style>
  code {
    @apply bg-gray-700 px-1 rounded text-sm;
  }
</style>
