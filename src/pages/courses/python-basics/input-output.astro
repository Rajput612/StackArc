---
import MainLayout from '../../../layouts/MainLayout.astro';
import CourseSidebar from '../../../components/CourseSidebar.astro';
import CodePlayground from '../../../components/CodePlayground.jsx';
---

<MainLayout title="Python Input and Output">
  <div class="flex">
    <CourseSidebar courseType="python-basics" />
    <div class="flex-1 max-w-4xl mx-auto px-4 py-8">
      <h1 class="text-3xl font-bold mb-8">Input and Output in Python</h1>

      <section class="mb-12">
        <h2 class="text-2xl font-semibold mb-4">Output with print()</h2>
        <div class="bg-white dark:bg-gray-800 rounded-lg p-6">
          <p class="mb-4">The <code>print()</code> function is used to display output to the console.</p>
          <CodePlayground 
            client:load 
            initialCode={`# Basic Print
print("Hello, World!")

# Multiple Arguments
name = "Alice"
age = 25
print("Name:", name, "Age:", age)

# Formatting with f-strings
print(f"My name is {name} and I am {age} years old.")

# Separator and End Parameters
print("Python", "is", "awesome", sep="-", end="!\n")

# Printing Multiple Types
print(42, 3.14, True)`} 
          />
        </div>
      </section>

      <section class="mb-12">
        <h2 class="text-2xl font-semibold mb-4">Input with input()</h2>
        <div class="bg-white dark:bg-gray-800 rounded-lg p-6">
          <p class="mb-4">The <code>input()</code> function is used to get user input from the console.</p>
          <CodePlayground 
            client:load 
            initialCode={`# Basic Input
name = input("Enter your name: ")
print(f"Hello, {name}!")

# Input with Type Conversion
age = int(input("Enter your age: "))
print(f"Next year, you'll be {age + 1}")

# Multiple Inputs
x = float(input("Enter first number: "))
y = float(input("Enter second number: "))
print(f"Sum: {x + y}, Product: {x * y}")`} 
          />
        </div>
      </section>

      <section class="mb-12">
        <h2 class="text-2xl font-semibold mb-4">Advanced Input/Output</h2>
        <div class="bg-white dark:bg-gray-800 rounded-lg p-6">
          <p class="mb-4">More advanced techniques for input and output.</p>
          <CodePlayground 
            client:load 
            initialCode={`# Reading Multiple Inputs
numbers = list(map(int, input("Enter numbers separated by space: ").split()))
print("Sum of numbers:", sum(numbers))

# Writing to a File
with open("output.txt", "w") as file:
    file.write("Hello, File!")
    print("Wrote to file successfully.")

# Reading from a File
with open("output.txt", "r") as file:
    content = file.read()
    print("File contents:", content)`} 
          />
        </div>
      </section>

      <section class="mb-12">
        <h2 class="text-2xl font-semibold mb-4">Practice Problems</h2>
        <div class="bg-white dark:bg-gray-800 rounded-lg p-6">
          <h3 class="text-xl font-semibold mb-4">Input/Output Challenges</h3>
          
          <div class="space-y-8">
            <div class="bg-gray-700 rounded-lg p-6">
              <h4 class="text-lg font-semibold mb-3">📝 Challenge 1: Personal Information Form</h4>
              <p class="text-gray-300 mb-4">Create an interactive form that collects and displays user information using input and output functions.</p>
              
              <div class="grid md:grid-cols-2 gap-6">
                <div>
                  <h5 class="font-semibold mb-2">🎯 Learning Objectives</h5>
                  <ul class="list-disc list-inside text-gray-300 space-y-2">
                    <li>Use <code>input()</code> to collect data</li>
                    <li>Format output using f-strings</li>
                    <li>Handle different data types</li>
                    <li>Basic input validation</li>
                  </ul>
                </div>
                
                <div>
                  <h5 class="font-semibold mb-2">🚀 Challenge Hints</h5>
                  <ul class="list-disc list-inside text-gray-300 space-y-2">
                    <li>Collect name, age, and email</li>
                    <li>Use type conversion functions</li>
                    <li>Create a formatted profile summary</li>
                    <li>Add basic input checks</li>
                  </ul>
                </div>
              </div>
              
              <div class="mt-6">
                <CodePlayground 
                  client:load 
                  initialCode={`# Personal Information Form Challenge
# TODO: Create an interactive user information form
# Hint: Collect and validate user details

# TODO: Add code to collect user information
# Collect name, age, email
# Create a formatted profile summary`} 
                />
              </div>
            </div>
            
            <div class="bg-gray-700 rounded-lg p-6">
              <h4 class="text-lg font-semibold mb-3">🧮 Challenge 2: Simple Grade Calculator</h4>
              <p class="text-gray-300 mb-4">Develop a program that calculates student grades based on input scores and displays results.</p>
              
              <div class="grid md:grid-cols-2 gap-6">
                <div>
                  <h5 class="font-semibold mb-2">🎯 Learning Objectives</h5>
                  <ul class="list-disc list-inside text-gray-300 space-y-2">
                    <li>Use multiple <code>input()</code> calls</li>
                    <li>Perform numeric calculations</li>
                    <li>Format output messages</li>
                    <li>Implement grade determination logic</li>
                  </ul>
                </div>
                
                <div>
                  <h5 class="font-semibold mb-2">🚀 Challenge Hints</h5>
                  <ul class="list-disc list-inside text-gray-300 space-y-2">
                    <li>Collect subject scores</li>
                    <li>Calculate average grade</li>
                    <li>Determine grade letter</li>
                    <li>Use f-strings for output</li>
                  </ul>
                </div>
              </div>
              
              <div class="mt-6">
                <CodePlayground 
                  client:load 
                  initialCode={`# Grade Calculator Challenge
# TODO: Create a grade calculation program
# Hint: Calculate average and determine grade

# TODO: Add code to collect subject scores
# Calculate average grade
# Determine and display grade`} 
                />
              </div>
            </div>
          </div>
        </div>
      </section>

      <section class="mb-12">
        <h2 class="text-2xl font-semibold mb-4">Challenge Solutions</h2>
        <div class="bg-white dark:bg-gray-800 rounded-lg p-6">
          <div class="space-y-8">
            <div class="bg-gray-700 rounded-lg p-6">
              <h3 class="text-lg font-semibold mb-3">📝 Solution 1: Personal Information Form</h3>
              <CodePlayground 
                client:load 
                initialCode={`# Personal Information Form Solution
# Real-world scenario: User registration form

try:
    # Collect user information with input validation
    name = input("Enter your full name: ").strip()
    
    # Age validation
    while True:
        age_str = input("Enter your age: ")
        if age_str.isdigit() and 0 < int(age_str) < 120:
            age = int(age_str)
            break
        print("Invalid age. Please enter a valid number.")
    
    # Email validation (basic)
    while True:
        email = input("Enter your email address: ").strip()
        if '@' in email and '.' in email:
            break
        print("Invalid email. Please enter a valid email address.")
    
    # Create and display user profile
    print("\n--- User Profile ---")
    print(f"Name: {name}")
    print(f"Age: {age} years old")
    print(f"Email: {email}")
    
    # Optional: Additional profile insights
    if age < 18:
        print("Note: You are a minor.")
    elif age >= 65:
        print("Senior user profile detected.")

except Exception as e:
    print(f"An error occurred: {e}")`} 
              />
            </div>
            
            <div class="bg-gray-700 rounded-lg p-6">
              <h3 class="text-lg font-semibold mb-3">🧮 Solution 2: Simple Grade Calculator</h3>
              <CodePlayground 
                client:load 
                initialCode={`# Grade Calculator Solution
# Real-world scenario: Academic performance tracking

try:
    # Collect subject scores with validation
    subjects = ['Math', 'Science', 'English']
    scores = []
    
    for subject in subjects:
        while True:
            score_str = input(f"Enter {subject} score (0-100): ")
            try:
                score = float(score_str)
                if 0 <= score <= 100:
                    scores.append(score)
                    break
                else:
                    print("Score must be between 0 and 100.")
            except ValueError:
                print("Invalid input. Please enter a numeric score.")
    
    # Calculate average grade
    average_score = sum(scores) / len(scores)
    
    # Determine grade letter
    if average_score >= 90:
        grade = 'A'
    elif average_score >= 80:
        grade = 'B'
    elif average_score >= 70:
        grade = 'C'
    elif average_score >= 60:
        grade = 'D'
    else:
        grade = 'F'
    
    # Display results
    print("\n--- Grade Report ---")
    print(f"Subjects: {', '.join(subjects)}")
    print(f"Individual Scores: {scores}")
    print(f"Average Score: {average_score:.2f}")
    print(f"Grade: {grade}")
    
    # Performance feedback
    if grade in ['A', 'B']:
        print("Excellent performance! Keep up the great work.")
    elif grade == 'C':
        print("Good job. There's room for improvement.")
    else:
        print("Consider seeking additional support to improve your grades.")`} 
              />
            </div>
          </div>
        </div>
      </section>
    </div>
  </div>
</MainLayout>

<style>
  code {
    @apply bg-gray-700 px-1 rounded text-sm;
  }
</style>
