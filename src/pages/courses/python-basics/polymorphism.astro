---
import MainLayout from '../../../layouts/MainLayout.astro';
import CodePlayground from '../../../components/CodePlayground.jsx';
import CourseSidebar from '../../../components/CourseSidebar.astro';

const methodPolymorphismCode = `# Method polymorphism example
class Shape:
    def area(self):
        pass

class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height
    
    def area(self):
        return self.width * self.height

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius
    
    def area(self):
        return 3.14 * self.radius ** 2

# Function that works with any shape
def print_area(shape):
    print(f"Area: {shape.area()}")

# Create shapes
rect = Rectangle(5, 3)
circle = Circle(2)

# Same function works with different shapes
print_area(rect)   # Area: 15
print_area(circle) # Area: 12.56`;

const duckTypingCode = `# Duck typing example
class Dog:
    def speak(self):
        return "Woof!"

class Cat:
    def speak(self):
        return "Meow!"

class Duck:
    def speak(self):
        return "Quack!"

def animal_sound(animal):
    # No need to check the type, just call speak()
    print(animal.speak())

# Create different animals
dog = Dog()
cat = Cat()
duck = Duck()

# Same function works with any object that has speak()
animal_sound(dog)   # Woof!
animal_sound(cat)   # Meow!
animal_sound(duck)  # Quack!`;

const operatorPolymorphismCode = `# Operator polymorphism example
class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    # Overload the + operator
    def __add__(self, other):
        return Vector(self.x + other.x, self.y + other.y)
    
    # Overload the * operator for scalar multiplication
    def __mul__(self, scalar):
        return Vector(self.x * scalar, self.y * scalar)
    
    def __str__(self):
        return f"Vector({self.x}, {self.y})"

# Create vectors
v1 = Vector(2, 3)
v2 = Vector(3, 4)

# Use operators with custom objects
v3 = v1 + v2
print(v3)  # Vector(5, 7)

v4 = v1 * 2
print(v4)  # Vector(4, 6)`;

const methodOverloadingCode = `# Method overloading in Python
class Calculator:
    def add(self, *args):
        # Handle different numbers of arguments
        if len(args) == 0:
            return 0
        elif len(args) == 1:
            return args[0]
        else:
            return sum(args)
    
    def multiply(self, x, y=1, z=1):
        # Default arguments provide flexibility
        return x * y * z

# Create calculator
calc = Calculator()

# Different ways to call the same methods
print(calc.add())           # 0
print(calc.add(5))         # 5
print(calc.add(2, 3))      # 5
print(calc.add(1, 2, 3))   # 6

print(calc.multiply(2))         # 2
print(calc.multiply(2, 3))      # 6
print(calc.multiply(2, 3, 4))   # 24`;

---

<MainLayout title="Polymorphism in Python">
  <div class="flex">
    <CourseSidebar courseType="python-basics" currentTopicId="polymorphism" />
    
    <div class="flex-1 p-8 overflow-y-auto">
      <div class="max-w-4xl mx-auto">
        <h1 class="text-3xl font-bold mb-8">Understanding Polymorphism in Python</h1>

        <div class="bg-yellow-50 rounded-lg p-6 mb-8">
          <h2 class="text-xl font-semibold mb-4">What is Polymorphism?</h2>
          <p class="mb-4">
            Polymorphism means "many forms" and occurs when we have many classes that are related to each other through inheritance.
            It allows you to write code that can work with objects of different types in a uniform way.
          </p>
          <ul class="list-disc ml-6 space-y-2">
            <li>Method polymorphism through inheritance</li>
            <li>Duck typing - "If it walks like a duck and quacks like a duck..."</li>
            <li>Operator overloading</li>
            <li>Method overloading through default arguments</li>
          </ul>
        </div>

        <section class="mb-12">
          <h2 class="text-2xl font-semibold mb-4">Method Polymorphism</h2>
          <div class="bg-white dark:bg-gray-800 rounded-lg p-6">
            <p class="mb-4">
              Different classes can implement the same method name with different behaviors:
            </p>
            <CodePlayground 
              client:load 
              initialCode={methodPolymorphismCode}
              language="python"
            />
          </div>
        </section>

        <section class="mb-12">
          <h2 class="text-2xl font-semibold mb-4">Duck Typing</h2>
          <div class="bg-white dark:bg-gray-800 rounded-lg p-6">
            <p class="mb-4">
              Python uses duck typing - it cares about what an object can do, not what it is:
            </p>
            <CodePlayground 
              client:load 
              initialCode={duckTypingCode}
              language="python"
            />
          </div>
        </section>

        <section class="mb-12">
          <h2 class="text-2xl font-semibold mb-4">Operator Polymorphism</h2>
          <div class="bg-white dark:bg-gray-800 rounded-lg p-6">
            <p class="mb-4">
              You can define how operators work with your custom objects:
            </p>
            <CodePlayground 
              client:load 
              initialCode={operatorPolymorphismCode}
              language="python"
            />
          </div>
        </section>

        <section class="mb-12">
          <h2 class="text-2xl font-semibold mb-4">Method Overloading</h2>
          <div class="bg-white dark:bg-gray-800 rounded-lg p-6">
            <p class="mb-4">
              Python doesn't support traditional method overloading, but we can achieve similar functionality:
            </p>
            <CodePlayground 
              client:load 
              initialCode={methodOverloadingCode}
              language="python"
            />
          </div>
        </section>

        <section class="mb-12">
          <h2 class="text-2xl font-semibold mb-4">What We've Learned</h2>
          <div class="bg-green-50 dark:bg-gray-800 rounded-lg p-6">
            <ul class="list-disc ml-6 space-y-2">
              <li>How to implement method polymorphism</li>
              <li>Understanding and using duck typing</li>
              <li>Overloading operators for custom objects</li>
              <li>Simulating method overloading with default arguments</li>
              <li>Best practices for polymorphic design</li>
            </ul>
          </div>
        </section>

        <div class="bg-blue-50 rounded-lg p-6">
          <h2 class="text-xl font-semibold mb-4">Practice Ideas</h2>
          <ul class="list-disc ml-6 space-y-2">
            <li>Create a shape hierarchy with different area calculations</li>
            <li>Build a payment system with different payment methods</li>
            <li>Implement a custom list class with operator overloading</li>
            <li>Design a media player that can play different types of media</li>
            <li>Create a math library with flexible function arguments</li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</MainLayout>
