---
import MainLayout from '../../../layouts/MainLayout.astro';
import CodePlayground from '../../../components/CodePlayground.jsx';
import CourseSidebar from '../../../components/CourseSidebar.astro';

const basicOrganizerCode = `# Simple File Organizer
import os
from pathlib import Path

def organize_files(directory):
    """Organize files in a directory by their extension"""
    # Create a Path object
    dir_path = Path(directory)
    
    # Dictionary to store extension -> folder mappings
    extension_map = {
        # Images
        '.jpg': 'Images',
        '.jpeg': 'Images',
        '.png': 'Images',
        '.gif': 'Images',
        # Documents
        '.pdf': 'Documents',
        '.doc': 'Documents',
        '.txt': 'Documents',
        # Audio
        '.mp3': 'Audio',
        '.wav': 'Audio',
        # Video
        '.mp4': 'Video',
        '.avi': 'Video'
    }
    
    # Count of files organized
    stats = {'total': 0}
    
    print(f"üîç Scanning directory: {directory}")
    
    # Create folders if they don't exist
    for folder in set(extension_map.values()):
        folder_path = dir_path / folder
        folder_path.mkdir(exist_ok=True)
        print(f"üìÅ Created folder: {folder}")
    
    # Create Misc folder for unknown extensions
    misc_folder = dir_path / 'Misc'
    misc_folder.mkdir(exist_ok=True)
    
    # Organize files
    for file_path in dir_path.iterdir():
        # Skip if it's a directory
        if file_path.is_dir():
            continue
        
        # Get the file extension
        extension = file_path.suffix.lower()
        
        # Determine the destination folder
        folder_name = extension_map.get(extension, 'Misc')
        folder_path = dir_path / folder_name
        
        try:
            # Move the file
            file_path.rename(folder_path / file_path.name)
            stats['total'] += 1
            
            # Update category stats
            stats[folder_name] = stats.get(folder_name, 0) + 1
            print(f"üìÑ Moved: {file_path.name} ‚Üí {folder_name}/")
            
        except Exception as e:
            print(f"‚ùå Error moving {file_path.name}: {e}")
    
    # Print summary
    print("\\nüìä Organization Summary:")
    for category, count in stats.items():
        if category != 'total':
            print(f"{category}: {count} files")
    print(f"Total files organized: {stats['total']}")

# Example usage
test_dir = "example_directory"
organize_files(test_dir)`;

const enhancedOrganizerCode = `# Enhanced File Organizer with Smart Categorization
import os
from pathlib import Path
from datetime import datetime
import mimetypes

class SmartOrganizer:
    def __init__(self):
        self.categories = {
            'Images': {
                'extensions': ['.jpg', '.jpeg', '.png', '.gif', '.bmp'],
                'emoji': 'üñºÔ∏è'
            },
            'Documents': {
                'extensions': ['.pdf', '.doc', '.docx', '.txt', '.xlsx'],
                'emoji': 'üìÑ'
            },
            'Code': {
                'extensions': ['.py', '.js', '.html', '.css', '.java'],
                'emoji': 'üë®‚Äçüíª'
            },
            'Media': {
                'extensions': ['.mp3', '.mp4', '.wav', '.avi', '.mov'],
                'emoji': 'üé¨'
            }
        }
        
        # Add date-based organization
        self.date_folders = {
            'This Week': 7,
            'This Month': 30,
            'Older': float('inf')
        }
    
    def get_category(self, file_path):
        """Determine file category based on extension and content type"""
        extension = file_path.suffix.lower()
        
        # Check extension first
        for category, info in self.categories.items():
            if extension in info['extensions']:
                return category, info['emoji']
        
        # Try to guess based on mime type
        mime_type = mimetypes.guess_type(file_path)[0]
        if mime_type:
            if 'image' in mime_type:
                return 'Images', 'üñºÔ∏è'
            elif 'text' in mime_type:
                return 'Documents', 'üìÑ'
            elif 'video' in mime_type or 'audio' in mime_type:
                return 'Media', 'üé¨'
        
        return 'Misc', 'üì¶'
    
    def get_date_folder(self, file_time):
        """Determine date-based folder for file"""
        days_old = (datetime.now() - datetime.fromtimestamp(file_time)).days
        
        for folder, max_days in self.date_folders.items():
            if days_old <= max_days:
                return folder
        return 'Older'
    
    def organize(self, directory):
        """Organize files by type and date"""
        dir_path = Path(directory)
        stats = {'total': 0}
        
        print(f"üîç Analyzing directory: {directory}")
        
        # Create category folders
        for category in self.categories:
            for date_folder in self.date_folders:
                folder_path = dir_path / category / date_folder
                folder_path.mkdir(parents=True, exist_ok=True)
        
        # Create Misc folders
        for date_folder in self.date_folders:
            (dir_path / 'Misc' / date_folder).mkdir(parents=True, exist_ok=True)
        
        # Organize files
        for file_path in dir_path.iterdir():
            if file_path.is_dir():
                continue
            
            # Get category and date folder
            category, emoji = self.get_category(file_path)
            date_folder = self.get_date_folder(file_path.stat().st_mtime)
            
            # Create destination path
            dest_folder = dir_path / category / date_folder
            dest_path = dest_folder / file_path.name
            
            try:
                # Move the file
                file_path.rename(dest_path)
                stats['total'] += 1
                
                # Update category stats
                key = f"{category}/{date_folder}"
                stats[key] = stats.get(key, 0) + 1
                
                print(f"{emoji} Moved: {file_path.name} ‚Üí {category}/{date_folder}/")
                
            except Exception as e:
                print(f"‚ùå Error moving {file_path.name}: {e}")
        
        # Print summary
        print("\\nüìä Organization Summary:")
        for key, count in stats.items():
            if key != 'total':
                print(f"{key}: {count} files")
        print(f"Total files organized: {stats['total']}")

# Example usage
organizer = SmartOrganizer()
organizer.organize("example_directory")`;

---

<MainLayout title="File Organizer Project">
  <div class="flex">
    <CourseSidebar courseType="python-basics" currentTopicId="file-organizer" />
    
    <div class="flex-1 p-8 overflow-y-auto">
      <div class="max-w-4xl mx-auto">
        <h1 class="text-3xl font-bold mb-8">Building a File Organizer</h1>

        <div class="bg-yellow-50 rounded-lg p-6 mb-8">
          <h2 class="text-xl font-semibold mb-4">Project Overview</h2>
          <p class="mb-4">
            Let's create a smart file organizer that helps keep your directories clean and organized! 
            We'll start with a basic version and then enhance it with smart categorization and date-based organization.
          </p>
        </div>

        <section class="mb-12">
          <h2 class="text-2xl font-semibold mb-4">Basic File Organizer</h2>
          <div class="bg-white dark:bg-gray-800 rounded-lg p-6">
            <p class="mb-4">
              Our first version organizes files by their extensions into appropriate folders. It handles common file types and provides a simple summary of the organization process.
            </p>
            <CodePlayground 
              client:load 
              initialCode={basicOrganizerCode}
              language="python"
            />
          </div>
        </section>

        <section class="mb-12">
          <h2 class="text-2xl font-semibold mb-4">Enhanced File Organizer</h2>
          <div class="bg-white dark:bg-gray-800 rounded-lg p-6">
            <p class="mb-4">
              This enhanced version adds smart categorization using MIME types, date-based organization, and emoji feedback. It creates a hierarchical folder structure to keep your files perfectly organized!
            </p>
            <CodePlayground 
              client:load 
              initialCode={enhancedOrganizerCode}
              language="python"
            />
          </div>
        </section>

        <section class="mb-12">
          <h2 class="text-2xl font-semibold mb-4">What We've Learned</h2>
          <div class="bg-green-50 dark:bg-gray-800 rounded-lg p-6">
            <ul class="list-disc ml-6 space-y-2">
              <li>Working with files and directories using pathlib</li>
              <li>File type detection and MIME types</li>
              <li>Object-oriented programming with classes</li>
              <li>Error handling and logging</li>
              <li>Date and time operations</li>
              <li>Creating user-friendly console output</li>
            </ul>
          </div>
        </section>

        <div class="bg-blue-50 rounded-lg p-6">
          <h2 class="text-xl font-semibold mb-4">Challenge Ideas</h2>
          <ul class="list-disc ml-6 space-y-2">
            <li>Add file deduplication to handle duplicate files</li>
            <li>Implement file compression for archives</li>
            <li>Create a graphical interface using tkinter</li>
            <li>Add support for custom organization rules</li>
            <li>Implement file preview generation</li>
            <li>Add undo/redo functionality for file moves</li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</MainLayout>
