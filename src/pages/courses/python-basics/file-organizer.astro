---
import MainLayout from '../../../layouts/MainLayout.astro';
import CodeBlock from '../../../components/CodeBlock';
import CourseSidebar from '../../../components/CourseSidebar.astro';

const basicOrganizerCode = `# Simple File Organizer
import os
import shutil
from pathlib import Path

def organize_files(directory):
    """Organize files in a directory by their extension"""
    # Create a Path object
    dir_path = Path(directory)
    
    # Dictionary to store extension -> folder mappings
    extension_map = {
        # Images
        '.jpg': 'Images',
        '.jpeg': 'Images',
        '.png': 'Images',
        '.gif': 'Images',
        # Documents
        '.pdf': 'Documents',
        '.doc': 'Documents',
        '.docx': 'Documents',
        '.txt': 'Documents',
        # Audio
        '.mp3': 'Audio',
        '.wav': 'Audio',
        '.flac': 'Audio',
        # Video
        '.mp4': 'Video',
        '.avi': 'Video',
        '.mkv': 'Video',
        # Others will go to Misc folder
    }
    
    # Count of files moved
    moved_files = 0
    
    print(f"Organizing files in: {directory}")
    
    # Iterate through all files in the directory
    for file_path in dir_path.iterdir():
        # Skip if it's a directory
        if file_path.is_dir():
            continue
        
        # Get the file extension
        extension = file_path.suffix.lower()
        
        # Determine the destination folder
        folder_name = extension_map.get(extension, 'Misc')
        folder_path = dir_path / folder_name
        
        # Create the folder if it doesn't exist
        folder_path.mkdir(exist_ok=True)
        
        # Move the file
        try:
            shutil.move(str(file_path), str(folder_path / file_path.name))
            moved_files += 1
            print(f"Moved {file_path.name} to {folder_name}/")
        except Exception as e:
            print(f"Error moving {file_path.name}: {e}")
    
    print(f"\nOrganization complete! Moved {moved_files} files.")
    return moved_files

def main():
    while True:
        # Get directory path from user
        directory = input("\nEnter directory path to organize (or 'q' to quit): ")
        
        if directory.lower() == 'q':
            print("Goodbye!")
            break
        
        # Check if directory exists
        if not os.path.isdir(directory):
            print("Invalid directory path! Please try again.")
            continue
        
        # Organize the files
        organize_files(directory)
        
        # Ask to continue
        choice = input("\nWould you like to organize another directory? (yes/no): ")
        if choice.lower() != 'yes':
            print("Goodbye!")
            break

if __name__ == "__main__":
    main()`;

const enhancedOrganizerCode = `# Enhanced File Organizer with Rules and Logging
import os
import shutil
import json
import logging
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional

class FileOrganizer:
    def __init__(self, config_file: str = "organizer_config.json"):
        self.config_file = config_file
        self.rules = self.load_config()
        self.setup_logging()
    
    def setup_logging(self):
        """Set up logging configuration"""
        logging.basicConfig(
            filename=f'file_organizer_{datetime.now().strftime("%Y%m%d")}.log',
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)
    
    def load_config(self) -> Dict:
        """Load organization rules from config file"""
        default_rules = {
            "categories": {
                "Images": [".jpg", ".jpeg", ".png", ".gif", ".bmp"],
                "Documents": [".pdf", ".doc", ".docx", ".txt", ".xlsx", ".ppt"],
                "Audio": [".mp3", ".wav", ".flac", ".m4a"],
                "Video": [".mp4", ".avi", ".mkv", ".mov"],
                "Archives": [".zip", ".rar", ".7z", ".tar", ".gz"],
                "Code": [".py", ".js", ".html", ".css", ".java", ".cpp"]
            },
            "ignore_patterns": [".DS_Store", "Thumbs.db"],
            "size_limits": {
                "max_file_size_mb": 500,
                "min_file_size_kb": 1
            }
        }
        
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r') as f:
                    return json.load(f)
            else:
                # Save default config if none exists
                with open(self.config_file, 'w') as f:
                    json.dump(default_rules, f, indent=2)
                return default_rules
        except Exception as e:
            self.logger.error(f"Error loading config: {e}")
            return default_rules
    
    def get_category(self, file_path: Path) -> Optional[str]:
        """Determine the category for a file based on extension"""
        extension = file_path.suffix.lower()
        
        for category, extensions in self.rules["categories"].items():
            if extension in extensions:
                return category
        return "Misc"
    
    def should_process_file(self, file_path: Path) -> bool:
        """Check if file should be processed based on rules"""
        # Check ignore patterns
        if file_path.name in self.rules["ignore_patterns"]:
            return False
        
        # Check file size
        size_bytes = file_path.stat().st_size
        size_mb = size_bytes / (1024 * 1024)
        size_kb = size_bytes / 1024
        
        if size_mb > self.rules["size_limits"]["max_file_size_mb"]:
            self.logger.warning(f"File too large: {file_path.name}")
            return False
        
        if size_kb < self.rules["size_limits"]["min_file_size_kb"]:
            self.logger.warning(f"File too small: {file_path.name}")
            return False
        
        return True
    
    def create_directory_structure(self, base_dir: Path) -> None:
        """Create category directories if they don't exist"""
        for category in self.rules["categories"].keys():
            (base_dir / category).mkdir(exist_ok=True)
        (base_dir / "Misc").mkdir(exist_ok=True)
    
    def organize_files(self, directory: str) -> Dict[str, int]:
        """Organize files in the specified directory"""
        dir_path = Path(directory)
        stats = {category: 0 for category in self.rules["categories"].keys()}
        stats["Misc"] = 0
        
        self.logger.info(f"Starting organization of {directory}")
        self.create_directory_structure(dir_path)
        
        for file_path in dir_path.iterdir():
            if not file_path.is_file() or not self.should_process_file(file_path):
                continue
            
            category = self.get_category(file_path)
            dest_dir = dir_path / category
            
            try:
                shutil.move(str(file_path), str(dest_dir / file_path.name))
                stats[category] += 1
                self.logger.info(f"Moved {file_path.name} to {category}/")
            except Exception as e:
                self.logger.error(f"Error moving {file_path.name}: {e}")
        
        self.log_statistics(stats)
        return stats
    
    def log_statistics(self, stats: Dict[str, int]) -> None:
        """Log organization statistics"""
        total_files = sum(stats.values())
        self.logger.info("Organization completed!")
        self.logger.info(f"Total files processed: {total_files}")
        
        for category, count in stats.items():
            if count > 0:
                self.logger.info(f"{category}: {count} files")

# Example usage:
organizer = FileOrganizer()
stats = organizer.organize_files("/path/to/directory")
print("Files organized successfully!")`;
---

<MainLayout title="File Organizer Project">
  <div class="flex">
    <CourseSidebar courseType="python-basics" currentTopicId="file-organizer" />
    <div class="flex-1 max-w-4xl mx-auto px-4 py-8">
      <h1 class="text-3xl font-bold mb-8">Building a File Organizer</h1>
      
      <div class="bg-white rounded-lg shadow-lg p-8 mb-8">
        <h2 class="text-2xl font-semibold text-gray-800 mb-4">Basic File Organizer Implementation</h2>
        <p class="text-gray-600 mb-6">
          Let's create a file organization tool that helps users keep their directories clean and organized.
          This project will teach you:
        </p>
        <ul class="list-disc ml-6 mb-6 text-gray-600">
          <li>File system operations</li>
          <li>Path manipulation</li>
          <li>Directory management</li>
          <li>Error handling</li>
          <li>User input processing</li>
        </ul>

        <div class="mb-8">
          <h3 class="text-xl font-semibold text-gray-800 mb-4">Basic Organizer Code</h3>
          <CodeBlock code={basicOrganizerCode} />
          <div class="mt-4 text-gray-600">
            <p>Key features of the basic organizer:</p>
            <ul class="list-disc ml-6 mt-2">
              <li>Organize by file extension</li>
              <li>Create category folders</li>
              <li>Move files to appropriate folders</li>
              <li>Basic error handling</li>
            </ul>
          </div>
        </div>

        <div class="mb-8">
          <h3 class="text-xl font-semibold text-gray-800 mb-4">Enhanced Organizer Implementation</h3>
          <p class="text-gray-600 mb-4">
            Let's enhance our organizer with additional features like configuration, logging, and advanced rules.
          </p>
          <CodeBlock code={enhancedOrganizerCode} />
          <div class="mt-4 text-gray-600">
            <p>Additional features in the enhanced version:</p>
            <ul class="list-disc ml-6 mt-2">
              <li>Configuration file support</li>
              <li>Detailed logging system</li>
              <li>File size rules</li>
              <li>Ignore patterns</li>
              <li>Statistics tracking</li>
            </ul>
          </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="bg-gray-50 p-6 rounded-lg">
            <h3 class="text-lg font-semibold text-gray-800 mb-3">Learning Outcomes</h3>
            <ul class="space-y-2 text-gray-600">
              <li>File system manipulation</li>
              <li>Configuration management</li>
              <li>Logging implementation</li>
              <li>Type hints usage</li>
            </ul>
          </div>
          
          <div class="bg-gray-50 p-6 rounded-lg">
            <h3 class="text-lg font-semibold text-gray-800 mb-3">Project Extensions</h3>
            <ul class="space-y-2 text-gray-600">
              <li>Add file deduplication</li>
              <li>Create a GUI interface</li>
              <li>Add file preview features</li>
              <li>Implement undo operations</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
</MainLayout>
