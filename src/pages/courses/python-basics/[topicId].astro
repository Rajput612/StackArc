---
import CourseLayout from '../../../layouts/CourseLayout.astro';
import CodeSnippet from '../../../components/CodeSnippet.astro';
import MarkdownIt from 'markdown-it';
import { readFile } from 'node:fs/promises';
import { fileURLToPath } from 'node:url';
import path from 'node:path';

export async function getStaticPaths() {
  const topics = [
    'installation',
    'ide-setup',
    'input-output',
    'variables',
    'control-flow',
    'functions',
    'classes',
    'interactive-shell'
  ];

  return topics.map(topic => ({
    params: { topicId: topic }
  }));
}

const { topicId } = Astro.params;

// Read and process markdown content
const contentDir = path.join(
  path.dirname(fileURLToPath(import.meta.url)),
  '../../../content/courses/python-basics'
);

let content = '';
try {
  const filePath = path.join(contentDir, `${topicId}.md`);
  content = await readFile(filePath, 'utf-8');
} catch (error) {
  content = '# Content Not Found\n\nThis topic is currently under development.';
}

// Initialize markdown-it with options
const md = new MarkdownIt({
  html: true,
  linkify: true,
  typographer: true
});

// Custom renderer for code blocks
md.renderer.rules.fence = (tokens, idx) => {
  const token = tokens[idx];
  const code = token.content.trim();
  const lang = token.info || 'python';
  
  return `<CodeSnippet code="${code.replace(/"/g, '&quot;')}" language="${lang}" />`;
};

// Add classes to elements
md.renderer.rules.heading_open = (tokens, idx) => {
  const token = tokens[idx];
  const level = token.tag.slice(1);
  return `<${token.tag} class="heading-${level}">`;
};

md.renderer.rules.paragraph_open = () => '<p class="mb-4 leading-7">';

md.renderer.rules.bullet_list_open = () => '<ul class="list-disc ml-6 space-y-2">';
md.renderer.rules.ordered_list_open = () => '<ol class="list-decimal ml-6 space-y-2">';

md.renderer.rules.list_item_open = () => '<li class="mb-2">';

md.renderer.rules.link_open = (tokens, idx) => {
  const token = tokens[idx];
  const href = token.attrGet('href');
  const title = token.attrGet('title');
  
  return `<a href="${href}" ${title ? `title="${title}"` : ''} class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-200">`;
};

md.renderer.rules.code_inline = (tokens, idx) => {
  const code = tokens[idx].content;
  return `<code class="px-1.5 py-0.5 rounded bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 text-sm font-mono">${code}</code>`;
};

// Parse the markdown content
const htmlContent = md.render(content);

// Get topic title from first h1 in content
const titleMatch = content.match(/^#\s+(.+)$/m);
const title = titleMatch ? titleMatch[1] : 'Python Basics';
---

<CourseLayout
  title={title}
  currentTopicId={topicId}
  courseType="python-basics"
>
  <div class="prose dark:prose-invert max-w-none">
    <div class="content-wrapper">
      <Fragment set:html={htmlContent} />
    </div>
  </div>
</CourseLayout>

<style>
  .content-wrapper :global(.heading-1) {
    @apply text-4xl font-bold mb-6 mt-8;
  }

  .content-wrapper :global(.heading-2) {
    @apply text-3xl font-semibold mb-4 mt-8;
  }

  .content-wrapper :global(.heading-3) {
    @apply text-2xl font-medium mb-3 mt-6;
  }

  .content-wrapper :global(blockquote) {
    @apply pl-4 border-l-4 border-gray-300 dark:border-gray-700 italic my-4;
  }
</style>
