---
import MainLayout from '../../../layouts/MainLayout.astro';
import CodePlayground from '../../../components/CodePlayground.jsx';
import CourseSidebar from '../../../components/CourseSidebar.astro';

const basicTryExceptCode = `# Basic try-except example
try:
    age = int(input("Enter your age: "))
    if age < 0:
        raise ValueError("Age cannot be negative!")
    print(f"You are {age} years old")
except ValueError as e:
    print(f"Error: {e}")
    print("Please enter a valid positive number")`;

const multipleExceptsCode = `# Handling different types of errors
def divide_numbers():
    try:
        num1 = float(input("Enter first number: "))
        num2 = float(input("Enter second number: "))
        result = num1 / num2
        print(f"{num1} divided by {num2} is {result}")
    except ValueError:
        print("Error: Please enter valid numbers")
    except ZeroDivisionError:
        print("Error: Cannot divide by zero!")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

# Try it with different inputs!
divide_numbers()`;

const finallyBlockCode = `# Using try-except-finally
def save_user_data():
    file = None
    try:
        name = input("Enter your name: ")
        age = int(input("Enter your age: "))
        file = open("user_data.txt", "w")
        file.write(f"Name: {name}\\nAge: {age}")
        print("Data saved successfully!")
    except ValueError:
        print("Error: Please enter a valid age (number)")
    except IOError:
        print("Error: Could not write to file")
    finally:
        if file:
            file.close()
            print("File closed")

# Try running this code multiple times
save_user_data()`;

---

<MainLayout title="Try-Except in Python">
  <div class="flex">
    <CourseSidebar courseType="python-basics" currentTopicId="try-except-basic" />
    
    <div class="flex-1 p-8 overflow-y-auto">
      <div class="max-w-4xl mx-auto">
        <h1 class="text-3xl font-bold mb-8">Using Try-Except in Python</h1>

        <div class="bg-yellow-50 rounded-lg p-6 mb-8">
          <h2 class="text-xl font-semibold mb-4">What is Try-Except?</h2>
          <p class="mb-4">
            Try-except is Python's way of handling errors gracefully. Instead of crashing your program when something goes wrong, 
            you can catch the error and handle it appropriately.
          </p>
        </div>

        <section class="mb-12">
          <h2 class="text-2xl font-semibold mb-4">Basic Try-Except</h2>
          <div class="bg-white dark:bg-gray-800 rounded-lg p-6">
            <p class="mb-4">
              Here's a simple example of how to use try-except to handle invalid user input:
            </p>
            <CodePlayground 
              client:load 
              initialCode={basicTryExceptCode}
              language="python"
            />
          </div>
        </section>

        <section class="mb-12">
          <h2 class="text-2xl font-semibold mb-4">Handling Multiple Exceptions</h2>
          <div class="bg-white dark:bg-gray-800 rounded-lg p-6">
            <p class="mb-4">
              You can handle different types of errors differently:
            </p>
            <CodePlayground 
              client:load 
              initialCode={multipleExceptsCode}
              language="python"
            />
          </div>
        </section>

        <section class="mb-12">
          <h2 class="text-2xl font-semibold mb-4">Using Finally</h2>
          <div class="bg-white dark:bg-gray-800 rounded-lg p-6">
            <p class="mb-4">
              The finally block runs whether an error occurred or not. It's perfect for cleanup operations:
            </p>
            <CodePlayground 
              client:load 
              initialCode={finallyBlockCode}
              language="python"
            />
          </div>
        </section>

        <section class="mb-12">
          <h2 class="text-2xl font-semibold mb-4">What We've Learned</h2>
          <div class="bg-green-50 dark:bg-gray-800 rounded-lg p-6">
            <ul class="list-disc ml-6 space-y-2">
              <li>How to use basic try-except blocks</li>
              <li>Handling different types of exceptions</li>
              <li>Using finally for cleanup operations</li>
              <li>Best practices for error handling</li>
              <li>Making programs more robust with error handling</li>
            </ul>
          </div>
        </section>

        <div class="bg-blue-50 rounded-lg p-6">
          <h2 class="text-xl font-semibold mb-4">Practice Ideas</h2>
          <ul class="list-disc ml-6 space-y-2">
            <li>Create a calculator that handles division by zero</li>
            <li>Build a file reader that gracefully handles missing files</li>
            <li>Make a program that validates user input for a game</li>
            <li>Create a data parser that handles different data formats</li>
            <li>Build a simple database program with error handling</li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</MainLayout>
