---
import MainLayout from '../../../layouts/MainLayout.astro';
import CodeBlock from '../../../components/CodeBlock';
import CourseSidebar from '../../../components/CourseSidebar.astro';

const exceptionBasicsCode = `# Understanding Exceptions in Python
def divide_numbers(a, b):
    try:
        result = a / b
        return result
    except ZeroDivisionError:
        print("Error: Cannot divide by zero!")
        return None

# Examples of exceptions
print(divide_numbers(10, 2))   # Works fine: prints 5.0
print(divide_numbers(10, 0))   # Handles error gracefully`;

const exceptionTypesCode = `# Common Types of Exceptions
# 1. ZeroDivisionError
result = 10 / 0  # Raises ZeroDivisionError

# 2. TypeError
text = "hello" + 5  # Raises TypeError

# 3. ValueError
number = int("abc")  # Raises ValueError

# 4. IndexError
list = [1, 2, 3]
value = list[10]  # Raises IndexError

# 5. KeyError
dict = {"name": "John"}
age = dict["age"]  # Raises KeyError`;

const exceptionFlowCode = `# Exception Flow Control
def process_data(data):
    if not isinstance(data, (int, float)):
        raise TypeError("Data must be a number")
    
    if data < 0:
        raise ValueError("Data must be positive")
    
    return data * 2

# Using the function
try:
    result = process_data(-5)
except TypeError as e:
    print(f"Type Error: {e}")
except ValueError as e:
    print(f"Value Error: {e}")`;
---

<MainLayout title="Introduction to Python Exceptions">
  <div class="flex">
    <CourseSidebar courseType="python-basics" currentTopicId="exceptions-intro" />
    <div class="flex-1 max-w-4xl mx-auto px-4 py-8">
      <h1 class="text-3xl font-bold mb-8">Introduction to Python Exceptions</h1>
      
      <div class="bg-white rounded-lg shadow-lg p-8 mb-8">
        <h2 class="text-2xl font-semibold text-gray-800 mb-4">What are Exceptions?</h2>
        <p class="text-gray-600 mb-6">
          Exceptions are events that occur during program execution that disrupt the normal flow of instructions.
          Understanding exceptions is crucial for writing robust Python programs that can handle errors gracefully.
        </p>

        <div class="mb-8">
          <h3 class="text-xl font-semibold text-gray-800 mb-4">Exception Basics</h3>
          <CodeBlock code={exceptionBasicsCode} />
          <div class="mt-4 text-gray-600">
            <p>Key concepts about exceptions:</p>
            <ul class="list-disc ml-6 mt-2">
              <li>Exceptions signal that something unexpected happened</li>
              <li>They help prevent program crashes</li>
              <li>Python provides many built-in exception types</li>
              <li>Exceptions can be caught and handled</li>
            </ul>
          </div>
        </div>

        <div class="mb-8">
          <h3 class="text-xl font-semibold text-gray-800 mb-4">Types of Exceptions</h3>
          <CodeBlock code={exceptionTypesCode} />
          <div class="mt-4 text-gray-600">
            <p>Common built-in exceptions:</p>
            <ul class="list-disc ml-6 mt-2">
              <li>ZeroDivisionError: Division or modulo by zero</li>
              <li>TypeError: Operation on incompatible types</li>
              <li>ValueError: Operation with correct type but inappropriate value</li>
              <li>IndexError: Sequence index out of range</li>
              <li>KeyError: Dictionary key not found</li>
            </ul>
          </div>
        </div>

        <div class="mb-8">
          <h3 class="text-xl font-semibold text-gray-800 mb-4">Exception Flow Control</h3>
          <CodeBlock code={exceptionFlowCode} />
          <div class="mt-4 text-gray-600">
            <p>Understanding exception flow:</p>
            <ul class="list-disc ml-6 mt-2">
              <li>Exceptions can be raised explicitly using raise</li>
              <li>Multiple exception types can be handled separately</li>
              <li>Exceptions can carry additional information</li>
              <li>Exception handling affects program flow</li>
            </ul>
          </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="bg-gray-50 p-6 rounded-lg">
            <h3 class="text-lg font-semibold text-gray-800 mb-3">Why Use Exceptions?</h3>
            <ul class="space-y-2 text-gray-600">
              <li>Separate error handling from normal code</li>
              <li>Handle multiple error cases elegantly</li>
              <li>Provide meaningful error messages</li>
              <li>Make code more maintainable</li>
            </ul>
          </div>
          
          <div class="bg-gray-50 p-6 rounded-lg">
            <h3 class="text-lg font-semibold text-gray-800 mb-3">Best Practices</h3>
            <ul class="space-y-2 text-gray-600">
              <li>Only catch exceptions you can handle</li>
              <li>Be specific about which exceptions to catch</li>
              <li>Keep try blocks focused and minimal</li>
              <li>Use appropriate exception types</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
</MainLayout>
