---
import MainLayout from '../../layouts/MainLayout.astro';
import CodeBlock from '../../components/CodeBlock';

const commonExceptionsCode = `# Common Built-in Exceptions
# TypeError
try:
    result = "hello" + 42  # Trying to add string and integer
except TypeError as e:
    print(f"TypeError: {e}")

# ValueError
try:
    number = int("hello")  # Trying to convert string to integer
except ValueError as e:
    print(f"ValueError: {e}")

# IndexError
try:
    my_list = [1, 2, 3]
    value = my_list[10]  # Accessing invalid index
except IndexError as e:
    print(f"IndexError: {e}")

# KeyError
try:
    my_dict = {"name": "John"}
    value = my_dict["age"]  # Accessing non-existent key
except KeyError as e:
    print(f"KeyError: {e}")`;

const exceptionHierarchyCode = `# Exception Hierarchy Example
def demonstrate_hierarchy():
    try:
        # This will raise an ArithmeticError (specifically ZeroDivisionError)
        result = 1 / 0
    except ArithmeticError as e:
        print(f"Caught arithmetic error: {e}")
    
    try:
        # This will raise a LookupError (specifically IndexError)
        lst = []
        value = lst[0]
    except LookupError as e:
        print(f"Caught lookup error: {e}")

# Exception hierarchy:
# BaseException
#  ├── Exception
#  │    ├── ArithmeticError
#  │    │    └── ZeroDivisionError
#  │    ├── LookupError
#  │    │    ├── IndexError
#  │    │    └── KeyError
#  │    └── ValueError`;

const exceptionChainingCode = `# Exception Chaining
def process_data(data):
    try:
        return int(data)
    except ValueError as e:
        raise RuntimeError("Failed to process data") from e

try:
    result = process_data("invalid")
except RuntimeError as e:
    print(f"Error: {e}")
    print(f"Original error: {e.__cause__}")`;
---

<MainLayout title="Python Exception Types">
  <div class="max-w-4xl mx-auto">
    <h1 class="text-4xl font-bold text-gray-900 mb-6">Python Exception Types and Handling</h1>
    
    <div class="bg-white rounded-lg shadow-lg p-8 mb-8">
      <h2 class="text-2xl font-semibold text-gray-800 mb-4">Common Built-in Exceptions</h2>
      <p class="text-gray-600 mb-6">
        Python provides many built-in exception types to handle different kinds of errors. Understanding these exceptions helps in writing more robust error handling code.
      </p>

      <div class="mb-8">
        <h3 class="text-xl font-semibold text-gray-800 mb-4">Common Exception Examples</h3>
        <CodeBlock code={commonExceptionsCode} />
        <div class="mt-4 text-gray-600">
          <p>Key built-in exceptions:</p>
          <ul class="list-disc ml-6 mt-2">
            <li>TypeError: When an operation is performed on an incompatible type</li>
            <li>ValueError: When an operation receives an argument with the right type but wrong value</li>
            <li>IndexError: When trying to access an invalid sequence index</li>
            <li>KeyError: When a dictionary key is not found</li>
          </ul>
        </div>
      </div>

      <div class="mb-8">
        <h3 class="text-xl font-semibold text-gray-800 mb-4">Exception Hierarchy</h3>
        <CodeBlock code={exceptionHierarchyCode} />
        <div class="mt-4 text-gray-600">
          <p>Understanding the exception hierarchy:</p>
          <ul class="list-disc ml-6 mt-2">
            <li>All exceptions inherit from BaseException</li>
            <li>Most custom exceptions should inherit from Exception</li>
            <li>Specific exceptions inherit from more general ones</li>
            <li>You can catch parent exceptions to handle multiple related exceptions</li>
          </ul>
        </div>
      </div>

      <div class="mb-8">
        <h3 class="text-xl font-semibold text-gray-800 mb-4">Exception Chaining</h3>
        <CodeBlock code={exceptionChainingCode} />
        <div class="mt-4 text-gray-600">
          <p>Exception chaining features:</p>
          <ul class="list-disc ml-6 mt-2">
            <li>Use raise from to chain exceptions</li>
            <li>Preserve the original cause of the error</li>
            <li>Access the original exception using __cause__</li>
            <li>Helps in debugging and error tracking</li>
          </ul>
        </div>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="bg-gray-50 p-6 rounded-lg">
          <h3 class="text-lg font-semibold text-gray-800 mb-3">When to Use Which Exception</h3>
          <ul class="space-y-2 text-gray-600">
            <li>ValueError: Invalid value but correct type</li>
            <li>TypeError: Incompatible types</li>
            <li>RuntimeError: Generic runtime errors</li>
            <li>Custom exceptions: Domain-specific errors</li>
          </ul>
        </div>
        
        <div class="bg-gray-50 p-6 rounded-lg">
          <h3 class="text-lg font-semibold text-gray-800 mb-3">Exception Handling Tips</h3>
          <ul class="space-y-2 text-gray-600">
            <li>Catch specific exceptions when possible</li>
            <li>Use exception chaining for clarity</li>
            <li>Document custom exceptions well</li>
            <li>Consider the exception hierarchy</li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</MainLayout>
